{"version":3,"file":"static/js/567.fd9267cb.chunk.js","mappings":"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CA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,QACA,SACA,QACA,QAEF3P,EAAG,CACD,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,OACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,OAEF+H,EAAG,CACD,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,QAGJ,GAAI,CACF4H,EAAG,CACD,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF3P,EAAG,CACD,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF+H,EAAG,CACD,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QAwCN,SAAS2R,GAAY9X,EAAa4G,GAEhC,IAAK,IAAIlK,EAAI,EAAGA,EAAIsD,EAAEpD,OAAQF,IAC5B,GAAIsD,EAAEtD,GAAG,GAAG8U,KAAK5K,GAAKgR,GACpB,OAAOlb,EAGX,MAAM,IAAIa,MAAM,oBAClB,CAEO,SAASwa,KAId,OAAO1I,CACT,CAEO,SAAS2I,GACdC,GAGA,OAAO5I,EAAU4I,EACnB,CAEO,IAAMC,GAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,KAG1CC,GAAmB,CAAC,IAAK,IAAK,KASpC,SAASzS,GACdxI,GAGA,MAAM8C,EAAI9C,EAAE8H,MAAM,KAAKoT,OAAOC,SAC9B,GAAIrY,EAAEpD,OAAS,IAAM,EACnB,OAAO,KAET,MAAM0b,EAAQtY,EAAE,GAChB,GACY,MAAVsY,GACU,MAAVA,GACU,MAAVA,GACU,MAAVA,GACU,MAAVA,EAEA,OAAO,KAET,MAAMC,EAA+B,GACrC,IAA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","sources":["../node_modules/cubing/src/cubing/puzzle-geometry/FaceNameSwizzler.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NullMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FTONotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FaceRenamingMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/MegaminxScramblingNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NxNxNCubeMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/PyraminxNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/SkewbNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Options.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Perm.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PermOriSet.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PGPuzzles.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Quat.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PlatonicGenerator.ts","../node_modules/cubing/src/cubing/puzzle-geometry/SchreierSims.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PuzzleGeometry.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NotationMapper.ts"],"sourcesContent":["// Manages a set of face names.  Detects whether they are prefix-free.\n// Implements greedy splitting into face names and comparisons between\n// concatenated face names and grip names.\n\nexport class FaceNameSwizzler {\n  public prefixFree: boolean = true;\n  public gripnames: string[] = [];\n  constructor(\n    public facenames: string[],\n    gripnames_arg?: string[],\n  ) {\n    if (gripnames_arg) {\n      this.gripnames = gripnames_arg;\n    }\n    for (let i = 0; this.prefixFree && i < facenames.length; i++) {\n      for (let j = 0; this.prefixFree && j < facenames.length; j++) {\n        if (i !== j && facenames[i].startsWith(facenames[j])) {\n          this.prefixFree = false;\n        }\n      }\n    }\n  }\n\n  public setGripNames(names: string[]): void {\n    this.gripnames = names;\n  }\n\n  // split a string into face names and return a list of\n  // indices.\n  public splitByFaceNames(s: string): number[] {\n    const r = [];\n    let at = 0;\n    while (at < s.length) {\n      if (at > 0 && at < s.length && s[at] === \"_\") {\n        at++;\n      }\n      let currentMatch = -1;\n      for (let i = 0; i < this.facenames.length; i++) {\n        if (\n          s.substr(at).startsWith(this.facenames[i]) &&\n          (currentMatch < 0 ||\n            this.facenames[i].length > this.facenames[currentMatch].length)\n        ) {\n          currentMatch = i;\n        }\n      }\n      if (currentMatch >= 0) {\n        r.push(currentMatch);\n        at += this.facenames[currentMatch].length;\n      } else {\n        throw new Error(`Could not split ${s} into face names.`);\n      }\n    }\n    return r;\n  }\n\n  // cons a grip from an array of numbers.\n  public joinByFaceIndices(list: number[]): string {\n    let sep = \"\";\n    const r = [];\n    for (let i = 0; i < list.length; i++) {\n      r.push(sep);\n      r.push(this.facenames[list[i]]);\n      if (!this.prefixFree) {\n        sep = \"_\";\n      }\n    }\n    return r.join(\"\");\n  }\n\n  /*\n   *   Try to match something the user gave us with some geometric\n   *   feature.  We used to have strict requirements:\n   *\n   *      a)  The set of face names are prefix free\n   *      b)  When specifying a corner, all coincident planes were\n   *          specified\n   *\n   *   But, to allow megaminx to have more reasonable and\n   *   conventional names, and to permit shorter canonical\n   *   names, we are relaxing these requirements and adding\n   *   new syntax.  Now:\n   *\n   *      a)  Face names need not be syntax free.\n   *      b)  When parsing a geometric name, we use greedy\n   *          matching, so the longest name that matches the\n   *          user string at the current position is the one\n   *          assumed to match.\n   *      c)  Underscores are permitted to separate face names\n   *          (both in user input and in geometric\n   *          descriptions).\n   *      d)  Default names of corner moves where corners have\n   *          more than three corners, need only include three\n   *          of the corners.\n   *\n   *   This code is not performance-sensitive so we can do it a\n   *   slow and simple way.\n   */\n  public spinmatch(userinput: string, longname: string): boolean {\n    // are these the same rotationally?\n    if (userinput === longname) {\n      return true;\n    }\n    try {\n      const e1 = this.splitByFaceNames(userinput);\n      const e2 = this.splitByFaceNames(longname);\n      // All elements of userinput need to be in the longname.\n      // There should be no duplicate elements in the userinput.\n      // if both have length 1 or length 2, the sets must be equal.\n      // if both have length 3 or more, then the first set must be\n      // a subset of the second.  Order doesn't matter.\n      if (e1.length !== e2.length && e1.length < 3) {\n        return false;\n      }\n      for (let i = 0; i < e1.length; i++) {\n        for (let j = 0; j < i; j++) {\n          if (e1[i] === e1[j]) {\n            return false;\n          }\n        }\n        let found = false;\n        for (let j = 0; j < e2.length; j++) {\n          if (e1[i] === e2[j]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /* same as above, but permit both to have v's on the end. */\n  public spinmatchv(userinput: string, longname: string): boolean {\n    if (userinput.endsWith(\"v\") && longname.endsWith(\"v\")) {\n      return this.spinmatch(\n        userinput.slice(0, userinput.length - 1),\n        longname.slice(0, longname.length - 1),\n      );\n    } else {\n      return this.spinmatch(userinput, longname);\n    }\n  }\n\n  public unswizzle(s: string): string {\n    if ((s.endsWith(\"v\") || s.endsWith(\"w\")) && s[0] <= \"Z\") {\n      s = s.slice(0, s.length - 1);\n    }\n    const upperCaseGrip = s.toUpperCase();\n    for (let i = 0; i < this.gripnames.length; i++) {\n      const g = this.gripnames[i];\n      if (this.spinmatch(upperCaseGrip, g)) {\n        return g;\n      }\n    }\n    return s;\n  }\n}\n","import type { Move } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NullMapper implements NotationMapper {\n  public notationToInternal(move: Move): Move | null {\n    return move;\n  }\n\n  public notationToExternal(move: Move): Move | null {\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FTONotationMapper implements NotationMapper {\n  constructor(\n    private child: NotationMapper,\n    private sw: FaceNameSwizzler,\n  ) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (\n      move.family === \"T\" &&\n      move.innerLayer === undefined &&\n      move.outerLayer === undefined\n    ) {\n      return new Move(\n        new QuantumMove(\"FLRv\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else {\n      const r = this.child.notationToInternal(move);\n      return r;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    let fam = move.family;\n    if (fam.length > 0 && fam[fam.length - 1] === \"v\") {\n      fam = fam.substring(0, fam.length - 1);\n    }\n    if (this.sw.spinmatch(fam, \"FLUR\")) {\n      return new Move(\n        new QuantumMove(\"T\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","// face renaming mapper.  Accepts two face name remappers.  We\n// work between the two.\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FaceRenamingMapper implements NotationMapper {\n  constructor(\n    public internalNames: FaceNameSwizzler,\n    public externalNames: FaceNameSwizzler,\n  ) {}\n\n  // TODO:  consider putting a cache in front of this\n  public convertString(\n    grip: string,\n    a: FaceNameSwizzler,\n    b: FaceNameSwizzler,\n  ): string {\n    let suffix = \"\";\n    if ((grip.endsWith(\"v\") || grip.endsWith(\"v\")) && grip <= \"_\") {\n      suffix = grip.slice(grip.length - 1);\n      grip = grip.slice(0, grip.length - 1);\n    }\n    const upper = grip.toUpperCase();\n    let isLowerCase = false;\n    if (grip !== upper) {\n      isLowerCase = true;\n      grip = upper;\n    }\n    grip = b.joinByFaceIndices(a.splitByFaceNames(grip));\n    if (isLowerCase) {\n      grip = grip.toLowerCase();\n    }\n    return grip + suffix;\n  }\n\n  public convert(move: Move, a: FaceNameSwizzler, b: FaceNameSwizzler): Move {\n    const grip = move.family;\n    const ngrip = this.convertString(grip, a, b);\n    if (grip === ngrip) {\n      return move;\n    } else {\n      return new Move(\n        new QuantumMove(ngrip, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n  }\n\n  public notationToInternal(move: Move): Move {\n    const r = this.convert(move, this.externalNames, this.internalNames);\n    return r;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return this.convert(move, this.internalNames, this.externalNames);\n  }\n}\n","// Sits on top of a (possibly null) notation mapper, and\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\n// adds R++/R--/D++/D-- notation mapping.\nexport class MegaminxScramblingNotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer === undefined && move.outerLayer === undefined) {\n      if (Math.abs(move.amount) === 1) {\n        if (move.family === \"R++\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"R--\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), 2 * move.amount);\n        } else if (move.family === \"D++\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D--\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), 2 * move.amount);\n        }\n\n        // TODO: Figure out if `cubing/alg` should parse `R++` to a family of `R++`.\n        if (move.family === \"R_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        }\n      }\n      if (move.family === \"y\") {\n        return new Move(\"Uv\", move.amount);\n      }\n      if (move.family === \"x\" && Math.abs(move.amount) === 2) {\n        return new Move(\"ERv\", move.amount / 2);\n      }\n    }\n    return this.child.notationToInternal(move);\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === \"ERv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        move.amount * 2,\n      );\n    }\n    if (move.family === \"ILv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        -move.amount * 2,\n      );\n    }\n    if (move.family === \"Uv\") {\n      return new Move(\n        new QuantumMove(\"y\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    if (move.family === \"Dv\") {\n      return new Move(\"y\", -move.amount);\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NxNxNCubeMapper implements NotationMapper {\n  constructor(public slices: number) {}\n\n  public notationToInternal(move: Move): Move {\n    const grip = move.family;\n    if (!(move.innerLayer || move.outerLayer)) {\n      if (grip === \"x\") {\n        move = new Move(\"Rv\", move.amount);\n      } else if (grip === \"y\") {\n        move = new Move(\"Uv\", move.amount);\n      } else if (grip === \"z\") {\n        move = new Move(\"Fv\", move.amount);\n      }\n      if ((this.slices & 1) === 1) {\n        if (grip === \"E\") {\n          move = new Move(\n            new QuantumMove(\"D\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"M\") {\n          move = new Move(\n            new QuantumMove(\"L\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"S\") {\n          move = new Move(\n            new QuantumMove(\"F\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        }\n      }\n      if (this.slices > 2) {\n        if (grip === \"e\") {\n          move = new Move(\n            new QuantumMove(\"D\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"m\") {\n          move = new Move(\n            new QuantumMove(\"L\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"s\") {\n          move = new Move(\n            new QuantumMove(\"F\", this.slices - 1, 2),\n            move.amount,\n          );\n        }\n      }\n    }\n    return move;\n  }\n\n  // do we want to map slice moves to E/M/S instead of 2U/etc.?\n  public notationToExternal(move: Move): Move {\n    const grip = move.family;\n    if (!(move.innerLayer || move.outerLayer)) {\n      if (grip === \"Rv\") {\n        return new Move(\"x\", move.amount);\n      } else if (grip === \"Uv\") {\n        return new Move(\"y\", move.amount);\n      } else if (grip === \"Fv\") {\n        return new Move(\"z\", move.amount);\n      } else if (grip === \"Lv\") {\n        return new Move(\"x\", -move.amount);\n      } else if (grip === \"Dv\") {\n        return new Move(\"y\", -move.amount);\n      } else if (grip === \"Bv\") {\n        return new Move(\"z\", -move.amount);\n      }\n    }\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst pyraminxFamilyMap: Record<string, string> = {\n  U: \"frl\",\n  L: \"fld\",\n  R: \"fdr\",\n  B: \"dlr\",\n  u: \"FRL\",\n  l: \"FLD\",\n  r: \"FDR\",\n  b: \"DLR\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n};\nconst tetraminxFamilyMap: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n  u: \"frl\",\n  l: \"fld\",\n  r: \"fdr\",\n  b: \"dlr\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n  d: \"d\",\n  f: \"f\",\n  bl: \"l\",\n  br: \"r\",\n};\n\nconst pyraminxFamilyMapWCA: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n};\n\nconst pyraminxExternalQuantumY = new QuantumMove(\"y\");\nconst pyraminxInternalQuantumY = new QuantumMove(\"Dv\");\n\nexport class PyraminxNotationMapper implements NotationMapper {\n  protected wcaHack: boolean = false;\n  map: Record<string, string> = pyraminxFamilyMap;\n\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      const newFamilyWCA = pyraminxFamilyMapWCA[move.family];\n      if (newFamilyWCA) {\n        return new Move(\n          new QuantumMove(newFamilyWCA, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    const newFamily = this.map[move.family];\n\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else if (pyraminxExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxInternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      for (const [external, internal] of Object.entries(pyraminxFamilyMapWCA)) {\n        if (this.child.spinmatch(move.family, internal)) {\n          return new Move(\n            new QuantumMove(external, move.innerLayer, move.outerLayer),\n            move.amount,\n          );\n        }\n      }\n    }\n    for (const [external, internal] of Object.entries(this.map)) {\n      if (this.child.spinmatch(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (pyraminxInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxExternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class TetraminxNotationMapper extends PyraminxNotationMapper {\n  protected override wcaHack = true;\n\n  constructor(child: FaceNameSwizzler) {\n    super(child);\n    this.map = tetraminxFamilyMap;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst skewbFamilyMap: Record<string, string> = {\n  U: \"UBL\",\n  UL: \"ULF\",\n  F: \"UFR\",\n  UR: \"URB\",\n  B: \"DBL\",\n  D: \"DFR\",\n  L: \"DLF\",\n  R: \"DRB\",\n  Uv: \"UBLv\",\n  ULv: \"ULFv\",\n  Fv: \"UFRv\",\n  URv: \"URBv\",\n  Bv: \"DBLv\",\n  Dv: \"DFRv\",\n  Lv: \"DLFv\",\n  Rv: \"DRBv\",\n};\n\n// TODO: combine using a similar table.\nconst skewbExternalQuantumX = new QuantumMove(\"x\");\nconst skewbInternalQuantumX = new QuantumMove(\"Rv\");\nconst skewbInternalQuantumXPrime = new QuantumMove(\"Lv\");\nconst skewbExternalQuantumY = new QuantumMove(\"y\");\nconst skewbInternalQuantumY = new QuantumMove(\"Uv\");\nconst skewbInternalQuantumYPrime = new QuantumMove(\"Dv\");\nconst skewbExternalQuantumZ = new QuantumMove(\"z\");\nconst skewbInternalQuantumZ = new QuantumMove(\"Fv\");\nconst skewbInternalQuantumZPrime = new QuantumMove(\"Bv\");\n\nexport class SkewbNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    const newFamily = skewbFamilyMap[move.family];\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.outerLayer, move.innerLayer),\n        move.amount,\n      );\n    }\n    if (skewbExternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumX, move.amount);\n    }\n    if (skewbExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumY, move.amount);\n    }\n    if (skewbExternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumZ, move.amount);\n    }\n    return null;\n    /*\n       *   (1) We are not including x/y/z in Skewb; they aren't WCA notation and\n       *   it's unclear anyone needs them for reconstructions.\n       *\n    } else if (move.family === \"x\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Rv\", move.amount);\n    } else if (move.family === \"y\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Uv\", move.amount);\n    } else if (move.family === \"z\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Fv\", move.amount);\n       */\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    for (const [external, internal] of Object.entries(skewbFamilyMap)) {\n      if (this.child.spinmatchv(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (skewbInternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, move.amount);\n    }\n    if (skewbInternalQuantumXPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, -move.amount);\n    }\n    if (skewbInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, move.amount);\n    }\n    if (skewbInternalQuantumYPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, -move.amount);\n    }\n    if (skewbInternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, move.amount);\n    }\n    if (skewbInternalQuantumZPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, -move.amount);\n    }\n    return null;\n    /*\n       *   See (1) above.\n       *\n    if (move.family === \"Rv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"x\", move.amount);\n    } else if (move.family === \"Uv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"y\", move.amount);\n    } else if (move.family === \"Fv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"z\", move.amount);\n       */\n    // } else {\n    //   return null;\n    // }\n  }\n}\n","import {\n  parsePuzzleDescription,\n  type PuzzleDescription,\n} from \"./PuzzleGeometry\";\n\nexport function parseOptions(argv: string[]): {\n  puzzleDescription: PuzzleDescription | null;\n  options: PuzzleGeometryOptions;\n} {\n  let argp = 0;\n  const options: PuzzleGeometryOptions = {};\n  while (argp < argv.length && argv[argp][0] === \"-\") {\n    const option = argv[argp++];\n    if (option === \"--rotations\") {\n      options.addRotations = true;\n    } else if (option === \"--allmoves\") {\n      options.allMoves = true;\n    } else if (option === \"--outerblockmoves\") {\n      options.outerBlockMoves = true;\n    } else if (option === \"--vertexmoves\") {\n      options.vertexMoves = true;\n    } else if (option === \"--nocorners\") {\n      options.includeCornerOrbits = false;\n    } else if (option === \"--noedges\") {\n      options.includeEdgeOrbits = false;\n    } else if (option === \"--noorientation\") {\n      options.fixedOrientation = true;\n    } else if (option === \"--nocenters\") {\n      options.includeCenterOrbits = false;\n    } else if (option === \"--omit\") {\n      options.excludeOrbits = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--moves\") {\n      options.moveList = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--optimize\") {\n      options.optimizeOrbits = true;\n    } else if (option === \"--scramble\") {\n      options.scrambleAmount = 100;\n    } else if (option === \"--fixcorner\") {\n      options.fixedPieceType = \"v\";\n    } else if (option === \"--fixedge\") {\n      options.fixedPieceType = \"e\";\n    } else if (option === \"--fixcenter\") {\n      options.fixedPieceType = \"f\";\n    } else if (option === \"--orientcenters\") {\n      options.orientCenters = true;\n    } else if (option === \"--puzzleorientation\") {\n      options.puzzleOrientation = JSON.parse(argv[argp]); // TODO: Validate input.\n      argp++;\n    } else {\n      throw new Error(`Bad option: ${option}`);\n    }\n  }\n  const puzzleDescription = parsePuzzleDescription(argv.slice(argp).join(\" \"));\n  return { puzzleDescription, options };\n}\n\ntype FaceName = string;\ntype OrientationDirection = [number, number, number];\nexport type FaceBasedOrientationDescription = [\n  [FaceName, OrientationDirection],\n  [FaceName, OrientationDirection],\n];\nexport type BaseFaceCount = 4 | 6 | 8 | 12 | 20;\nexport type FaceBasedOrientationDescriptionLookup = Record<\n  BaseFaceCount,\n  FaceBasedOrientationDescription\n>;\n\nexport class PuzzleGeometryFullOptions {\n  verbosity: number = 0; // verbosity (console.log)\n\n  allMoves: boolean = false; // generate all slice moves in ksolve\n  outerBlockMoves: boolean; // generate outer block moves\n  vertexMoves: boolean = false; // generate vertex moves\n  addRotations: boolean = false; // add symmetry information to ksolve output\n  moveList: string[] | null = null; // move list to generate\n\n  fixedOrientation: boolean = false; // eliminate any orientations\n  fixedPieceType: null | \"e\" | \"v\" | \"f\" = null; // fix a piece?\n  orientCenters: boolean = false; // orient centers?\n\n  // TODO: Group these into a single object?\n  includeCornerOrbits: boolean = true; // include corner orbits\n  includeCenterOrbits: boolean = true; // include center orbits\n  includeEdgeOrbits: boolean = true; // include edge orbits\n  // Overrides the previous options.\n  excludeOrbits: string[] = []; // exclude these orbits\n  optimizeOrbits: boolean = false; // optimize PermOri\n\n  grayCorners: boolean = false; // make corner sets gray\n  grayCenters: boolean = false; // make center sets gray\n  grayEdges: boolean = false; // make edge sets gray\n\n  puzzleOrientation: FaceBasedOrientationDescription | null = null; // single puzzle orientation from options\n  puzzleOrientations: FaceBasedOrientationDescriptionLookup | null = null; // puzzle orientation override object from options // TODO: is this needed?\n\n  scrambleAmount: number = 0; // scramble?\n\n  constructor(options: PuzzleGeometryOptions = {}) {\n    Object.assign(this, options);\n  }\n}\n\nexport type PuzzleGeometryOptions = Partial<PuzzleGeometryFullOptions>;\n","const zeroCache: number[][] = [];\nconst iotaCache: number[][] = [];\n\nexport function zeros(n: number): number[] {\n  if (!zeroCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = 0;\n    }\n    zeroCache[n] = c;\n  }\n  return zeroCache[n];\n}\n\nexport function iota(n: number): number[] {\n  if (!iotaCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = i;\n    }\n    iotaCache[n] = c;\n  }\n  return iotaCache[n];\n}\n\nexport function identity(n: number): Perm {\n  return new Perm(iota(n));\n}\n\nexport function random(n: number): Perm {\n  // random\n  const c = Array(n);\n  for (let i = 0; i < n; i++) {\n    c[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    const j = i + Math.floor((n - i) * Math.random());\n    const t = c[i];\n    c[i] = c[j];\n    c[j] = t;\n  }\n  return new Perm(c);\n}\n\nexport function factorial(a: number): bigint {\n  let r = BigInt(1);\n  while (a > 1) {\n    r *= BigInt(a);\n    a--;\n  }\n  return r;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (a > b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (a > 0) {\n    const m = b % a;\n    b = a;\n    a = m;\n  }\n  return b;\n}\n\nexport function lcm(a: number, b: number): number {\n  return (a / gcd(a, b)) * b;\n}\n\nexport class Perm {\n  public n: number; // length\n  public p: number[]; // The permutation itself\n  constructor(a: number[]) {\n    this.n = a.length;\n    this.p = a;\n  }\n\n  public toString(): string {\n    // stringify\n    return `Perm[${this.p.join(\" \")}]`;\n  }\n\n  public mul(p2: Perm): Perm {\n    // multiply\n    const c: number[] = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = p2.p[this.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public rmul(p2: Perm): Perm {\n    // multiply the other way\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = this.p[p2.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public inv(): Perm {\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[this.p[i]] = i;\n    }\n    return new Perm(c);\n  }\n\n  public compareTo(p2: Perm): number {\n    // comparison\n    for (let i = 0; i < this.n; i++) {\n      if (this.p[i] !== p2.p[i]) {\n        return this.p[i] - p2.p[i];\n      }\n    }\n    return 0;\n  }\n\n  public toGap(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = this.p[i]; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(`(${incyc.reverse().join(\",\")})`);\n    }\n    return cyc.join(\"\");\n  }\n\n  public toMathematica(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = this.p[i]; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(`{${incyc.reverse().join(\",\")}}`);\n    }\n    return `Cycles[{${cyc.join(\",\")}}]`;\n  }\n\n  public order(): number {\n    let r = 1;\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      let cs = 0;\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        cs++;\n        seen[j] = true;\n      }\n      r = lcm(r, cs);\n    }\n    return r;\n  }\n}\n","import { Move } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\"; // TODO\nimport type {\n  KPatternData,\n  KPatternOrbitData,\n  KPuzzleOrbitDefinition,\n  KTransformationOrbitData,\n} from \"../kpuzzle/KPuzzleDefinition\";\nimport { NullMapper } from \"./notation-mapping\";\nimport type { NotationMapper } from \"./notation-mapping/NotationMapper\";\n/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ import {\n  factorial,\n  iota,\n  lcm,\n  Perm,\n  zeros,\n} from \"./Perm\";\nexport class PGOrbitDef {\n  constructor(\n    public size: number,\n    public mod: number,\n  ) {}\n  public reassemblySize(): bigint {\n    return factorial(this.size) * BigInt(this.mod) ** BigInt(this.size);\n  }\n}\n\nlet lastGlobalDefinitionCounter = 0;\n\nexport function externalName(\n  mapper: NotationMapper,\n  moveString: string,\n): string {\n  const mv = Move.fromString(moveString);\n  const mv2 = mapper.notationToExternal(mv);\n  if (mv2 === null || mv === mv2) {\n    return moveString;\n  }\n  return mv2.toString();\n}\n\nexport class PGOrbitsDef {\n  constructor(\n    public orbitnames: string[],\n    private orbitdefs: PGOrbitDef[],\n    public solved: VisibleState,\n    public movenames: string[],\n    public moveops: PGTransform[],\n    public isRotation: boolean[],\n    public forcenames: boolean[],\n  ) {}\n\n  public toKTransformationData(t: PGTransform): KTransformationData {\n    const ktransformationData: KTransformationData = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      ktransformationData[this.orbitnames[i]] =\n        t.orbits[i].toKTransformationOrbitData();\n    }\n    return ktransformationData;\n  }\n\n  public toKPatternData(t: PGTransform): KPatternData {\n    const kpatternData: KPatternData = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      kpatternData[this.orbitnames[i]] = t.orbits[i].toKPatternOrbitData();\n    }\n    return kpatternData;\n  }\n\n  // TODO: remove this\n  public static transformToKTransformationData(\n    orbitnames: string[],\n    t: PGTransform,\n  ): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < orbitnames.length; j++) {\n      mp[orbitnames[j]] = t.orbits[j].toKTransformationOrbitData();\n    }\n    return mp;\n  }\n\n  private describeSet(s: number, r: string[], mapper: NotationMapper): void {\n    const n = this.orbitdefs[s].size;\n    const m = new Array(n);\n    for (let i = 0; i < n; i++) {\n      m[i] = [];\n    }\n    for (let i = 0; i < this.movenames.length; i++) {\n      if (this.isRotation[i]) {\n        continue;\n      }\n      let mvname = this.movenames[i];\n      if (!this.forcenames[i]) {\n        mvname = externalName(mapper, mvname);\n        if (mvname[mvname.length - 1] === \"'\") {\n          mvname = mvname.substring(0, mvname.length - 1);\n        }\n      }\n      const pd = this.moveops[i].orbits[s];\n      for (let j = 0; j < n; j++) {\n        if (pd.perm[j] !== j || pd.ori[j] !== 0) {\n          m[j].push(mvname);\n        }\n      }\n    }\n    for (let j = 0; j < n; j++) {\n      r.push(`# ${j + 1} ${m[j].join(\" \")}`);\n    }\n  }\n\n  public toKsolve(\n    name: string,\n    mapper: NotationMapper = new NullMapper(),\n  ): string[] {\n    const result = [];\n    result.push(`Name ${name}`);\n    result.push(\"\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      result.push(\n        `Set ${this.orbitnames[i]} ${this.orbitdefs[i].size} ${this.orbitdefs[i].mod}`,\n      );\n      this.describeSet(i, result, mapper);\n    }\n    result.push(\"\");\n    result.push(\"Solved\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      this.solved.orbits[i].appendDefinition(\n        result,\n        this.orbitnames[i],\n        false,\n        false,\n      );\n    }\n    result.push(\"End\");\n    for (let i = 0; i < this.movenames.length; i++) {\n      result.push(\"\");\n      let name = this.movenames[i];\n      if (!this.forcenames[i]) {\n        name = externalName(mapper, this.movenames[i]);\n      }\n      let doinv = false;\n      if (name[name.length - 1] === \"'\") {\n        doinv = true;\n        name = name.substring(0, name.length - 1);\n      }\n      result.push(`Move ${name}`);\n      for (let j = 0; j < this.orbitnames.length; j++) {\n        if (doinv) {\n          this.moveops[i].orbits[j]\n            .inv()\n            .appendDefinition(result, this.orbitnames[j], true);\n        } else {\n          this.moveops[i].orbits[j].appendDefinition(\n            result,\n            this.orbitnames[j],\n            true,\n          );\n        }\n      }\n      result.push(\"End\");\n    }\n    // extra blank line on end lets us use join(\"\\n\") to terminate all\n    return result;\n  }\n\n  // TODO: return type.\n  public toKPuzzleDefinition(includemoves: boolean): KPuzzleDefinition {\n    const orbits: KPuzzleOrbitDefinition[] = [];\n    const defaultPatternData: KPatternData = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      orbits.push({\n        orbitName: this.orbitnames[i],\n        numPieces: this.orbitdefs[i].size,\n        numOrientations: this.orbitdefs[i].mod,\n      });\n      const defaultPatternFrom =\n        this.solved.orbits[i].toKTransformationOrbitData();\n      defaultPatternData[this.orbitnames[i]] = {\n        pieces: defaultPatternFrom.permutation,\n        orientation: defaultPatternFrom.orientationDelta,\n      };\n    }\n    const moves: { [moveName: string]: any } = {};\n    if (includemoves) {\n      for (let i = 0; i < this.movenames.length; i++) {\n        moves[this.movenames[i]] = this.toKTransformationData(this.moveops[i]);\n      }\n    }\n    return {\n      name: `PG3D #${++lastGlobalDefinitionCounter}`,\n      orbits,\n      defaultPattern: defaultPatternData,\n      moves,\n    };\n  }\n\n  public optimize(): PGOrbitsDef {\n    const neworbitnames: string[] = [];\n    const neworbitdefs: PGOrbitDef[] = [];\n    const newsolved: PGOrbit[] = [];\n    const newmoveops: PGOrbit[][] = [];\n    for (let j = 0; j < this.moveops.length; j++) {\n      newmoveops.push([]);\n    }\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      const om = this.orbitdefs[i].mod;\n      const n = this.orbitdefs[i].size;\n      const du = new DisjointUnion(n);\n      const changed = new Array<boolean>(this.orbitdefs[i].size);\n      for (let k = 0; k < n; k++) {\n        changed[k] = false;\n      }\n      // don't consider rotations when optimizing, for what to keep\n      // but *do* consider rotations for unions.\n      for (let j = 0; j < this.moveops.length; j++) {\n        for (let k = 0; k < n; k++) {\n          if (\n            this.moveops[j].orbits[i].perm[k] !== k ||\n            this.moveops[j].orbits[i].ori[k] !== 0\n          ) {\n            if (!this.isRotation[j]) {\n              changed[k] = true;\n            }\n            du.union(k, this.moveops[j].orbits[i].perm[k]);\n          }\n        }\n      }\n      let keepori = true;\n      // right now we kill ori only if solved is unique and\n      // if we can kill it completely.  This is not all the optimization\n      // we can perform.\n      if (om > 1) {\n        keepori = false;\n        const duo = new DisjointUnion(this.orbitdefs[i].size * om);\n        for (let j = 0; j < this.moveops.length; j++) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              for (let o = 0; o < om; o++) {\n                duo.union(\n                  k * om + o,\n                  this.moveops[j].orbits[i].perm[k] * om +\n                    ((o + this.moveops[j].orbits[i].ori[k]) % om),\n                );\n              }\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let o = 1; o < om; o++) {\n            if (duo.find(j * om) === duo.find(j * om + o)) {\n              keepori = true;\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let k = 0; k < j; k++) {\n            if (\n              this.solved.orbits[i].perm[j] === this.solved.orbits[i].perm[k]\n            ) {\n              keepori = true;\n            }\n          }\n        }\n      }\n      // is there just one result set, or more than one?\n      let nontriv = -1;\n      let multiple = false;\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (changed[j]) {\n          const h = du.find(j);\n          if (nontriv < 0) {\n            nontriv = h;\n          } else if (nontriv !== h) {\n            multiple = true;\n          }\n        }\n      }\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (!changed[j]) {\n          continue;\n        }\n        const h = du.find(j);\n        if (h !== j) {\n          continue;\n        }\n        const no: number[] = [];\n        const on: number[] = [];\n        let nv = 0;\n        for (let k = 0; k < this.orbitdefs[i].size; k++) {\n          if (du.find(k) === j) {\n            no[nv] = k;\n            on[k] = nv;\n            nv++;\n          }\n        }\n        if (multiple) {\n          neworbitnames.push(`${this.orbitnames[i]}_p${j}`);\n        } else {\n          neworbitnames.push(this.orbitnames[i]);\n        }\n        if (keepori) {\n          neworbitdefs.push(new PGOrbitDef(nv, this.orbitdefs[i].mod));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv));\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(this.moveops[k].orbits[i].remap(no, on, nv));\n          }\n        } else {\n          neworbitdefs.push(new PGOrbitDef(nv, 1));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv).killOri());\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(\n              this.moveops[k].orbits[i].remap(no, on, nv).killOri(),\n            );\n          }\n        }\n      }\n    }\n    return new PGOrbitsDef(\n      neworbitnames,\n      neworbitdefs,\n      new VisibleState(newsolved),\n      this.movenames,\n      newmoveops.map((_) => new PGTransform(_)),\n      this.isRotation,\n      this.forcenames,\n    );\n  }\n\n  // replace the solved state with a new scrambled state.\n  public scramble(n: number): void {\n    this.solved = this.solved.mul(this.getScrambleTransformation(n));\n  }\n\n  // generate a new \"random\" position based on an entropy pool\n  // this should be significantly faster and more random than just\n  // doing a large number of random moves, especially on big puzzles.\n  public getScrambleTransformation(n: number): PGTransform {\n    // don't let n be too tiny\n    if (n < 100) {\n      n = 100;\n    }\n    const pool: PGTransform[] = [];\n    for (let i = 0; i < this.moveops.length; i++) {\n      pool[i] = this.moveops[i];\n    }\n    for (let i = 0; i < pool.length; i++) {\n      const j = Math.floor(Math.random() * pool.length);\n      const t = pool[i];\n      pool[i] = pool[j];\n      pool[j] = t;\n    }\n    if (n < pool.length) {\n      n = pool.length;\n    }\n    for (let i = 0; i < n; i++) {\n      const ri = Math.floor(Math.random() * pool.length);\n      const rj = Math.floor(Math.random() * pool.length);\n      const rm = Math.floor(Math.random() * this.moveops.length);\n      pool[ri] = pool[ri].mul(pool[rj]).mul(this.moveops[rm]);\n      if (Math.random() < 0.1) {\n        // break up parity\n        pool[ri] = pool[ri].mul(this.moveops[rm]);\n      }\n    }\n    let s = pool[0];\n    for (let i = 1; i < pool.length; i++) {\n      s = s.mul(pool[i]);\n    }\n    return s;\n  }\n\n  public reassemblySize(): bigint {\n    let n = BigInt(1);\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      n *= this.orbitdefs[i].reassemblySize();\n    }\n    return n;\n  }\n}\n\nexport class PGOrbit {\n  private static ktransformationCache: KTransformationOrbitData[] = [];\n\n  public static e(n: number, mod: number): PGOrbit {\n    return new PGOrbit(iota(n), zeros(n), mod);\n  }\n\n  constructor(\n    public perm: number[],\n    public ori: number[],\n    public orimod: number,\n  ) {}\n\n  public mul(b: PGOrbit): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    if (this.orimod === 1) {\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n      }\n      return new PGOrbit(newPerm, this.ori, this.orimod);\n    } else {\n      const newOri = new Array<number>(n);\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n        newOri[i] = (this.ori[b.perm[i]] + b.ori[i]) % this.orimod;\n      }\n      return new PGOrbit(newPerm, newOri, this.orimod);\n    }\n  }\n\n  public inv(): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    const newOri = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      newPerm[this.perm[i]] = i;\n      newOri[this.perm[i]] = (this.orimod - this.ori[i]) % this.orimod;\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public equal(b: PGOrbit): boolean {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== b.perm[i] || this.ori[i] !== b.ori[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // in-place mutator\n  public killOri(): this {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      this.ori[i] = 0;\n    }\n    this.orimod = 1;\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const o = this.orimod;\n    if (o === 1) {\n      return new Perm(this.perm);\n    }\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n * o);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < o; j++) {\n        newPerm[i * o + j] = o * this.perm[i] + ((this.ori[i] + j) % o);\n      }\n    }\n    return new Perm(newPerm);\n  }\n\n  // returns tuple of sets of identical pieces in this orbit\n  public identicalPieces(): number[][] {\n    const done: boolean[] = [];\n    const n = this.perm.length;\n    const r: number[][] = [];\n    for (let i = 0; i < n; i++) {\n      const v = this.perm[i];\n      if (done[v] === undefined) {\n        const s: number[] = [i];\n        done[v] = true;\n        for (let j = i + 1; j < n; j++) {\n          if (this.perm[j] === v) {\n            s.push(j);\n          }\n        }\n        r.push(s);\n      }\n    }\n    return r;\n  }\n\n  public order(): number {\n    // can be made more efficient\n    return this.toPerm().order();\n  }\n\n  public isIdentity(): boolean {\n    const n = this.perm.length;\n    if (this.perm === iota(n) && this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== i || this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private zeroOris(): boolean {\n    const n = this.perm.length;\n    if (this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public remap(no: number[], on: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    for (let i = 0; i < nv; i++) {\n      newPerm[i] = on[this.perm[no[i]]];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public remapVS(no: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    let nextNew = 0;\n    const reassign = [];\n    for (let i = 0; i < nv; i++) {\n      const ov = this.perm[no[i]];\n      if (reassign[ov] === undefined) {\n        reassign[ov] = nextNew++;\n      }\n      newPerm[i] = reassign[ov];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public appendDefinition(\n    result: string[],\n    name: string,\n    useVS: boolean,\n    concise: boolean = true,\n  ): void {\n    if (concise && this.isIdentity()) {\n      return;\n    }\n    result.push(name);\n    result.push(this.perm.map((_: number) => _ + 1).join(\" \"));\n    if (!this.zeroOris()) {\n      if (useVS) {\n        const newori = new Array<number>(this.ori.length);\n        for (let i = 0; i < newori.length; i++) {\n          newori[this.perm[i]] = this.ori[i];\n        }\n        result.push(newori.join(\" \"));\n      } else {\n        result.push(this.ori.join(\" \"));\n      }\n    }\n  }\n\n  public toKTransformationOrbitData(): KTransformationOrbitData {\n    const n = this.perm.length;\n    if (this.isIdentity()) {\n      if (!PGOrbit.ktransformationCache[n]) {\n        PGOrbit.ktransformationCache[n] = {\n          permutation: iota(n),\n          orientationDelta: zeros(n),\n        };\n      }\n      return PGOrbit.ktransformationCache[n];\n    } else {\n      return { permutation: this.perm, orientationDelta: this.ori };\n    }\n  }\n\n  public toKPatternOrbitData(): KPatternOrbitData {\n    const n = this.perm.length;\n    return {\n      pieces: this.perm,\n      orientation: this.ori,\n      orientationMod: zeros(n),\n    };\n  }\n}\n\nexport class PGTransformBase {\n  constructor(public orbits: PGOrbit[]) {}\n  public internalMul(b: PGTransformBase): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].mul(b.orbits[i]));\n    }\n    return newOrbits;\n  }\n\n  protected internalInv(): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (const orbit of this.orbits) {\n      newOrbits.push(orbit.inv());\n    }\n    return newOrbits;\n  }\n\n  public equal(b: PGTransformBase): boolean {\n    for (let i = 0; i < this.orbits.length; i++) {\n      if (!this.orbits[i].equal(b.orbits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected killOri(): this {\n    for (const orbit of this.orbits) {\n      orbit.killOri();\n    }\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const perms = new Array<Perm>();\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const p = orbit.toPerm();\n      perms.push(p);\n      n += p.n;\n    }\n    const newPerm = new Array<number>(n);\n    n = 0;\n    for (const p of perms) {\n      for (let j = 0; j < p.n; j++) {\n        newPerm[n + j] = n + p.p[j];\n      }\n      n += p.n;\n    }\n    return new Perm(newPerm);\n  }\n\n  public identicalPieces(): number[][] {\n    const r: number[][] = [];\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const o = orbit.orimod;\n      const s = orbit.identicalPieces();\n      for (let j = 0; j < s.length; j++) {\n        r.push(s[j].map((_) => _ * o + n));\n      }\n      n += o * orbit.perm.length;\n    }\n    return r;\n  }\n\n  public order(): number {\n    let r = 1;\n    for (const orbit of this.orbits) {\n      r = lcm(r, orbit.order());\n    }\n    return r;\n  }\n}\nexport class PGTransform extends PGTransformBase {\n  public mul(b: PGTransform): PGTransform {\n    return new PGTransform(this.internalMul(b));\n  }\n\n  public mulScalar(n: number): PGTransform {\n    if (n === 0) {\n      return this.e();\n    }\n    let t: PGTransform = this;\n    if (n < 0) {\n      t = t.inv();\n      n = -n;\n    }\n    while ((n & 1) === 0) {\n      t = t.mul(t);\n      n >>= 1;\n    }\n    if (n === 1) {\n      return t;\n    }\n    let s = t;\n    let r = this.e();\n    while (n > 0) {\n      if (n & 1) {\n        r = r.mul(s);\n      }\n      if (n > 1) {\n        s = s.mul(s);\n      }\n      n >>= 1;\n    }\n    return r;\n  }\n\n  public inv(): PGTransform {\n    return new PGTransform(this.internalInv());\n  }\n\n  public e(): PGTransform {\n    return new PGTransform(\n      this.orbits.map((_: PGOrbit) => PGOrbit.e(_.perm.length, _.orimod)),\n    );\n  }\n}\nexport class VisibleState extends PGTransformBase {\n  public mul(b: PGTransform): VisibleState {\n    return new VisibleState(this.internalMul(b));\n  }\n}\n//  Disjoint set union implementation.\nclass DisjointUnion {\n  private heads: number[];\n  constructor(public n: number) {\n    this.heads = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      this.heads[i] = i;\n    }\n  }\n\n  public find(v: number): number {\n    let h = this.heads[v];\n    if (this.heads[h] === h) {\n      return h;\n    }\n    h = this.find(this.heads[h]);\n    this.heads[v] = h;\n    return h;\n  }\n\n  public union(a: number, b: number): void {\n    const ah = this.find(a);\n    const bh = this.find(b);\n    if (ah < bh) {\n      this.heads[bh] = ah;\n    } else if (ah > bh) {\n      this.heads[ah] = bh;\n    }\n  }\n}\nexport function showcanon(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  curlev[0] = 1;\n  for (let d = 0; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (\n          ((st >> mv) & 1) === 0 &&\n          (st & commutes[mv] & ((1 << mv) - 1)) === 0\n        ) {\n          const nst = (st & commutes[mv]) | (1 << mv);\n          if (nextlev[nst] === undefined) {\n            nextlev[nst] = 0;\n          }\n          nextlev[nst] += (orders[mv] - 1) * cnt;\n        }\n      }\n    }\n    disp(`${d}: canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n// This is a less effective canonicalization (that happens to work fine\n// for the 3x3x3).  We include this only for comparison.\nexport function showcanon0(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  disp(\"0: canonseq 1\");\n  for (let x = 0; x < orders.length; x++) {\n    curlev[x] = orders[x] - 1;\n  }\n  for (let d = 1; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (mv === st || (commutes[mv] & (1 << st) && mv < st)) {\n          continue;\n        }\n        if (nextlev[mv] === undefined) {\n          nextlev[mv] = 0;\n        }\n        nextlev[mv] += (orders[mv] - 1) * cnt;\n      }\n    }\n    disp(`${d}\": canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n","export type PuzzleDescriptionString = string;\n\nexport const PGPuzzles: { [name: string]: PuzzleDescriptionString } = {\n  \"2x2x2\": \"c f 0\",\n  \"3x3x3\": \"c f 0.333333333333333\",\n  \"4x4x4\": \"c f 0.5 f 0\",\n  \"5x5x5\": \"c f 0.6 f 0.2\",\n  \"6x6x6\": \"c f 0.666666666666667 f 0.333333333333333 f 0\",\n  \"7x7x7\": \"c f 0.714285714285714 f 0.428571428571429 f 0.142857142857143\",\n  \"8x8x8\": \"c f 0.75 f 0.5 f 0.25 f 0\",\n  \"9x9x9\":\n    \"c f 0.777777777777778 f 0.555555555555556 f 0.333333333333333 f 0.111111111111111\",\n  \"10x10x10\": \"c f 0.8 f 0.6 f 0.4 f 0.2 f 0\",\n  \"11x11x11\":\n    \"c f 0.818181818181818 f 0.636363636363636 f 0.454545454545455 f 0.272727272727273 f 0.0909090909090909\",\n  \"12x12x12\":\n    \"c f 0.833333333333333 f 0.666666666666667 f 0.5 f 0.333333333333333 f 0.166666666666667 f 0\",\n  \"13x13x13\":\n    \"c f 0.846153846153846 f 0.692307692307692 f 0.538461538461538 f 0.384615384615385 f 0.230769230769231 f 0.0769230769230769\",\n  \"20x20x20\": \"c f 0 f .1 f .2 f .3 f .4 f .5 f .6 f .7 f .8 f .9\",\n  \"30x30x30\":\n    \"c f 0 f .066667 f .133333 f .2 f .266667 f .333333 f .4 f .466667 f .533333 f .6 f .666667 f .733333 f .8 f .866667 f .933333\",\n  \"40x40x40\":\n    \"c f 0 f .05 f .1 f .15 f .2 f .25 f .3 f .35 f .4 f .45 f .5 f .55 f .6 f .65 f .7 f .75 f .8 f .85 f .9 f .95\",\n  skewb: \"c v 0\",\n  \"master skewb\": \"c v 0.275\",\n  \"professor skewb\": \"c v 0 v 0.38\",\n  \"compy cube\": \"c v 0.915641442663986\",\n  helicopter: \"c e 0.707106781186547\",\n  \"curvy copter\": \"c e 0.83\",\n  dino: \"c v 0.577350269189626\",\n  \"little chop\": \"c e 0\",\n  pyramorphix: \"t e 0\",\n  mastermorphix: \"t e 0.346184634065199\",\n  pyraminx: \"t v 0.333333333333333 v 1.66666666666667\",\n  tetraminx: \"t v 0.333333333333333\",\n  \"master pyraminx\": \"t v 0 v 1 v 2\",\n  \"master tetraminx\": \"t v 0 v 1\",\n  \"professor pyraminx\": \"t v -0.2 v 0.6 v 1.4 v 2.2\",\n  \"professor tetraminx\": \"t v -0.2 v 0.6 v 1.4\",\n  \"royal pyraminx\":\n    \"t v -0.333333333333333 v 0.333333333333333 v 1 v 1.66666666666667 v 2.33333333333333\",\n  \"royal tetraminx\":\n    \"t v -0.333333333333333 v 0.333333333333333 v 1 v 1.66666666666667\",\n  \"emperor pyraminx\":\n    \"t v -0.428571428571429 v 0.142857142857143 v 0.714285714285714 v 1.28571428571429 v 1.85714285714286 v 2.42857142857143\",\n  \"emperor tetraminx\":\n    \"t v -0.428571428571429 v 0.142857142857143 v 0.714285714285714 v 1.28571428571429 v 1.85714285714286\",\n  \"Jing pyraminx\": \"t f 0\",\n  \"master pyramorphix\": \"t e 0.866025403784437\",\n  megaminx: \"d f 0.7\",\n  gigaminx: \"d f 0.64 f 0.82\",\n  teraminx: \"d f 0.64 f 0.76 f 0.88\",\n  petaminx: \"d f 0.64 f 0.73 f 0.82 f 0.91\",\n  examinx: \"d f 0.64 f 0.712 f 0.784 f 0.856 f 0.928\",\n  zetaminx: \"d f 0.64 f 0.7 f 0.76 f 0.82 f 0.88 f 0.94\",\n  yottaminx: \"d f 0.64 f 0.6914 f 0.7429 f 0.7943 f 0.8457 f 0.8971 f 0.9486\",\n  pentultimate: \"d f 0\",\n  \"master pentultimate\": \"d f 0.1\",\n  \"elite pentultimate\": \"d f 0 f 0.145905\",\n  // exact value for starminx is sqrt(5(5-2 sqrt(5))/3)\n  starminx: \"d v 0.937962370425399\",\n  \"starminx 2\": \"d f 0.23606797749979\",\n  \"pyraminx crystal\": \"d f 0.447213595499989\",\n  chopasaurus: \"d v 0\",\n  \"big chop\": \"d e 0\",\n  \"skewb diamond\": \"o f 0\",\n  FTO: \"o f 0.333333333333333\",\n  \"master FTO\": \"o f 0.5 f 0\",\n  \"Christopher's jewel\": \"o v 0.577350269189626\",\n  octastar: \"o e 0\",\n  \"Trajber's octahedron\": \"o v 0.433012701892219\",\n  \"radio chop\": \"i f 0\",\n  icosamate: \"i v 0\",\n  \"icosahedron 2\": \"i v 0.18759247376021\",\n  \"icosahedron 3\": \"i v 0.18759247376021 e 0\",\n  \"icosahedron static faces\": \"i v 0.84\",\n  \"icosahedron moving faces\": \"i v 0.73\",\n  \"Eitan's star\": \"i f 0.61803398874989\",\n  \"2x2x2 + dino\": \"c f 0 v 0.577350269189626\",\n  \"2x2x2 + little chop\": \"c f 0 e 0\",\n  \"dino + little chop\": \"c v 0.577350269189626 e 0\",\n  \"2x2x2 + dino + little chop\": \"c f 0 v 0.577350269189626 e 0\",\n  \"megaminx + chopasaurus\": \"d f 0.61803398875 v 0\",\n  \"starminx combo\": \"d f 0.23606797749979 v 0.937962370425399\",\n};\n\nexport type PuzzleName = keyof typeof PGPuzzles;\n","/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n\n// We need a quaternion class.  We use this to represent rotations,\n// planes, and points.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function centermassface(face: Quat[]): Quat {\n  // calculate a center of a face by averaging points\n  let s = new Quat(0, 0, 0, 0);\n  for (let i = 0; i < face.length; i++) {\n    s = s.sum(face[i]);\n  }\n  return s.smul(1.0 / face.length);\n}\n\nexport function solvethreeplanes(\n  p1: number,\n  p2: number,\n  p3: number,\n  planes: Quat[],\n): any {\n  // find intersection of three planes but only if interior\n  // Takes three indices into a plane array, and returns the point at the\n  // intersection of all three, but only if it is internal to all planes.\n  const p = planes[p1].intersect3(planes[p2], planes[p3]);\n  if (!p) {\n    return p;\n  }\n  for (let i = 0; i < planes.length; i++) {\n    if (i !== p1 && i !== p2 && i !== p3) {\n      const dt = planes[i].b * p.b + planes[i].c * p.c + planes[i].d * p.d;\n      if (\n        (planes[i].a > 0 && dt > planes[i].a) ||\n        (planes[i].a < 0 && dt < planes[i].a)\n      ) {\n        return false;\n      }\n    }\n  }\n  return p;\n}\n\nexport class Quat {\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number,\n    public d: number,\n  ) {}\n\n  public mul(q: Quat): Quat {\n    // Quaternion multiplication\n    return new Quat(\n      this.a * q.a - this.b * q.b - this.c * q.c - this.d * q.d,\n      this.a * q.b + this.b * q.a + this.c * q.d - this.d * q.c,\n      this.a * q.c - this.b * q.d + this.c * q.a + this.d * q.b,\n      this.a * q.d + this.b * q.c - this.c * q.b + this.d * q.a,\n    );\n  }\n\n  public toString(): string {\n    return `Q[${this.a},${this.b},${this.c},${this.d}]`;\n  }\n\n  public dist(q: Quat): number {\n    // Euclidean distance\n    return Math.hypot(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public len(): number {\n    // Euclidean length\n    return Math.hypot(this.a, this.b, this.c, this.d);\n  }\n\n  public cross(q: Quat): Quat {\n    // cross product\n    return new Quat(\n      0,\n      this.c * q.d - this.d * q.c,\n      this.d * q.b - this.b * q.d,\n      this.b * q.c - this.c * q.b,\n    );\n  }\n\n  public dot(q: Quat): number {\n    // dot product of two quaternions\n    return this.b * q.b + this.c * q.c + this.d * q.d;\n  }\n\n  public normalize(): Quat {\n    // make the magnitude be 1\n    const d = Math.sqrt(this.dot(this));\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public makenormal(): Quat {\n    // make a normal vector from a plane or quat or point\n    return new Quat(0, this.b, this.c, this.d).normalize();\n  }\n\n  public normalizeplane(): Quat {\n    // normalize a plane\n    const d = Math.hypot(this.b, this.c, this.d);\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public smul(m: number): Quat {\n    // scalar multiplication\n    return new Quat(this.a * m, this.b * m, this.c * m, this.d * m);\n  }\n\n  public sum(q: Quat): Quat {\n    // quaternion sum\n    return new Quat(this.a + q.a, this.b + q.b, this.c + q.c, this.d + q.d);\n  }\n\n  public sub(q: Quat): Quat {\n    // difference\n    return new Quat(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public angle(): number {\n    // quaternion angle\n    return 2 * Math.acos(this.a);\n  }\n\n  public invrot(): Quat {\n    // quaternion inverse rotation\n    return new Quat(this.a, -this.b, -this.c, -this.d);\n  }\n\n  public det3x3(\n    a00: number,\n    a01: number,\n    a02: number,\n    a10: number,\n    a11: number,\n    a12: number,\n    a20: number,\n    a21: number,\n    a22: number,\n  ): number {\n    // 3x3 determinant\n    return (\n      a00 * (a11 * a22 - a12 * a21) +\n      a01 * (a12 * a20 - a10 * a22) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  public rotateplane(q: Quat): Quat {\n    // rotate a plane using a quaternion\n    const t = q.mul(new Quat(0, this.b, this.c, this.d)).mul(q.invrot());\n    t.a = this.a;\n    return t;\n  }\n\n  // return any vector orthogonal to the given one.  Find the smallest\n  // component (in absolute value) and return the cross product of that\n  // axis with the given vector.\n  public orthogonal(): Quat {\n    const ab = Math.abs(this.b);\n    const ac = Math.abs(this.c);\n    const ad = Math.abs(this.d);\n    if (ab < ac && ab < ad) {\n      return this.cross(new Quat(0, 1, 0, 0)).normalize();\n    } else if (ac < ab && ac < ad) {\n      return this.cross(new Quat(0, 0, 1, 0)).normalize();\n    } else {\n      return this.cross(new Quat(0, 0, 0, 1)).normalize();\n    }\n  }\n\n  // return the Quaternion that will rotate the this vector\n  // to the b vector through rotatepoint.\n  public pointrotation(b: Quat): Quat {\n    const a = this.normalize();\n    b = b.normalize();\n    if (a.sub(b).len() < eps) {\n      return new Quat(1, 0, 0, 0);\n    }\n    let h = a.sum(b);\n    if (h.len() < eps) {\n      h = h.orthogonal();\n    } else {\n      h = h.normalize();\n    }\n    const r = a.cross(h);\n    r.a = a.dot(h);\n    return r;\n  }\n\n  // given two vectors, return the portion of the first that\n  // is not in the direction of the second.\n  public unproject(b: Quat): Quat {\n    return this.sum(b.smul(-this.dot(b) / (this.len() * b.len())));\n  }\n\n  public rotatepoint(q: Quat): Quat {\n    // rotate a point\n    return q.mul(this).mul(q.invrot());\n  }\n\n  public rotateface(face: Quat[]): Quat[] {\n    // rotate a face by this Q.\n    return face.map((_: Quat) => _.rotatepoint(this));\n  }\n\n  public intersect3(p2: Quat, p3: Quat): Quat | false {\n    // intersect three planes if there is one\n    const det = this.det3x3(\n      this.b,\n      this.c,\n      this.d,\n      p2.b,\n      p2.c,\n      p2.d,\n      p3.b,\n      p3.c,\n      p3.d,\n    );\n    if (Math.abs(det) < eps) {\n      return false; // TODO: Change to `null` or `undefined`?\n    }\n    return new Quat(\n      0,\n      this.det3x3(this.a, this.c, this.d, p2.a, p2.c, p2.d, p3.a, p3.c, p3.d) /\n        det,\n      this.det3x3(this.b, this.a, this.d, p2.b, p2.a, p2.d, p3.b, p3.a, p3.d) /\n        det,\n      this.det3x3(this.b, this.c, this.a, p2.b, p2.c, p2.a, p3.b, p3.c, p3.a) /\n        det,\n    );\n  }\n\n  public side(x: number): number {\n    // is this point close to the origin, or on one or the other side?\n    if (x > eps) {\n      return 1;\n    }\n    if (x < -eps) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * Cuts a face by this plane, or returns null if there\n   * is no intersection.\n   * @param face The face to cut.\n   */\n  public cutface(face: Quat[]): Quat[][] | null {\n    const d = this.a;\n    let seen = 0;\n    let r = null;\n    for (let i = 0; i < face.length; i++) {\n      seen |= 1 << (this.side(face[i].dot(this) - d) + 1);\n    }\n    if ((seen & 5) === 5) {\n      r = [];\n      // saw both sides\n      const inout = face.map((_: Quat) => this.side(_.dot(this) - d));\n      for (let s = -1; s <= 1; s += 2) {\n        const nface = [];\n        for (let k = 0; k < face.length; k++) {\n          if (inout[k] === s || inout[k] === 0) {\n            nface.push(face[k]);\n          }\n          const kk = (k + 1) % face.length;\n          if (inout[k] + inout[kk] === 0 && inout[k] !== 0) {\n            const vk = face[k].dot(this) - d;\n            const vkk = face[kk].dot(this) - d;\n            const r = vk / (vk - vkk);\n            const pt = face[k].smul(1 - r).sum(face[kk].smul(r));\n            nface.push(pt);\n          }\n        }\n        r.push(nface);\n      }\n    }\n    return r;\n  }\n\n  public cutfaces(faces: Quat[][]): Quat[][] {\n    // Cut a set of faces by a plane and return new set\n    const nfaces = [];\n    for (let j = 0; j < faces.length; j++) {\n      const face = faces[j];\n      const t = this.cutface(face);\n      if (t) {\n        nfaces.push(t[0]);\n        nfaces.push(t[1]);\n      } else {\n        nfaces.push(face);\n      }\n    }\n    return nfaces;\n  }\n\n  public faceside(face: Quat[]): number {\n    // which side of a plane is a face on?\n    const d = this.a;\n    for (let i = 0; i < face.length; i++) {\n      const s = this.side(face[i].dot(this) - d);\n      if (s !== 0) {\n        return s;\n      }\n    }\n    throw new Error(\"Could not determine side of plane in faceside\");\n  }\n\n  public sameplane(p: Quat): boolean {\n    // are two planes the same?\n    const a = this.normalize();\n    const b = p.normalize();\n    return a.dist(b) < eps || a.dist(b.smul(-1)) < eps;\n  }\n\n  public makecut(r: number): Quat {\n    // make a cut from a normal vector\n    return new Quat(r, this.b, this.c, this.d);\n  }\n}\n","/* tslint:disable prefer-for-of */ // TODO\n\nimport { Quat, solvethreeplanes } from \"./Quat\";\n\n// Next we define a class that yields quaternion generators for each of\n// the five platonic solids.  The quaternion generators chosen are\n// chosen specifically so that the first quaternion doubles as a plane\n// description that yields the given Platonic solid (so for instance, the\n// cubical group and octahedral group are identical in math, but we\n// give distinct representations choosing the first quaternion so that\n// we get the desired figure.)  Our convention is one vertex of the\n// shape points precisely down.\n\n// This class is static.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function cube(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(s5, s5, 0, 0), new Quat(s5, 0, s5, 0)];\n}\n\nexport function tetrahedron(): Quat[] {\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(0.5, 0.5, 0.5, -0.5)];\n}\n\nexport function dodecahedron(): Quat[] {\n  const d36 = (2 * Math.PI) / 10;\n  let dx = 0.5 + 0.3 * Math.sqrt(5);\n  let dy = 0.5 + 0.1 * Math.sqrt(5);\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  return [\n    new Quat(Math.cos(d36), dx * Math.sin(d36), dy * Math.sin(d36), 0),\n    new Quat(0.5, 0.5, 0.5, 0.5),\n  ];\n}\n\nexport function icosahedron(): Quat[] {\n  let dx = 1 / 6 + Math.sqrt(5) / 6;\n  let dy = 2 / 3 + Math.sqrt(5) / 3;\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  const ang = (2 * Math.PI) / 6;\n  return [\n    new Quat(Math.cos(ang), dx * Math.sin(ang), dy * Math.sin(ang), 0),\n    new Quat(Math.cos(ang), -dx * Math.sin(ang), dy * Math.sin(ang), 0),\n  ];\n}\n\nexport function octahedron(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(s5, 0, 0, s5)];\n}\n\nexport function closure(g: Quat[]): Quat[] {\n  // compute the closure of a set of generators\n  // This is quadratic in the result size.  Also, it has no protection\n  // against you providing a bogus set of generators that would generate\n  // an infinite group.\n  const q = [new Quat(1, 0, 0, 0)];\n  for (let i = 0; i < q.length; i++) {\n    for (let j = 0; j < g.length; j++) {\n      const ns = g[j].mul(q[i]);\n      const negns = ns.smul(-1);\n      let wasseen = false;\n      for (let k = 0; k < q.length; k++) {\n        if (ns.dist(q[k]) < eps || negns.dist(q[k]) < eps) {\n          wasseen = true;\n          break;\n        }\n      }\n      if (!wasseen) {\n        q.push(ns);\n      }\n    }\n  }\n  return q;\n}\n\nexport function uniqueplanes(p: Quat, g: Quat[]): Quat[] {\n  // compute unique plane rotations\n  // given a rotation group and a plane, find the rotations that\n  // generate unique planes.  This is quadratic in the return size.\n  const planes = [];\n  const planerot = [];\n  for (let i = 0; i < g.length; i++) {\n    const p2 = p.rotateplane(g[i]);\n    let wasseen = false;\n    for (let j = 0; j < planes.length; j++) {\n      if (p2.dist(planes[j]) < eps) {\n        wasseen = true;\n        break;\n      }\n    }\n    if (!wasseen) {\n      planes.push(p2);\n      planerot.push(g[i]);\n    }\n  }\n  return planerot;\n}\n\nexport function getface(planes: Quat[]): Quat[] {\n  // compute a face given a set of planes\n  // The face returned will be a set of points that lie in the first plane\n  // in the given array, that are on the surface of the polytope defined\n  // by all the planes, and will be returned in clockwise order.\n  // This is O(planes^2 * return size + return_size^2).\n  const face: Quat[] = [];\n  for (let i = 1; i < planes.length; i++) {\n    for (let j = i + 1; j < planes.length; j++) {\n      const p = solvethreeplanes(0, i, j, planes);\n      if (p) {\n        let wasseen = false;\n        for (let k = 0; k < face.length; k++) {\n          if (p.dist(face[k]) < eps) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          face.push(p);\n        }\n      }\n    }\n  }\n  for (;;) {\n    let changed = false;\n    for (let i = 0; i < face.length; i++) {\n      const j: number = (i + 1) % face.length;\n      if (planes[0].dot(face[i].cross(face[j])) < 0) {\n        const t: Quat = face[i];\n        face[i] = face[j];\n        face[j] = t;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      break;\n    }\n  }\n  return face;\n}\n","import { identity, Perm } from \"./Perm\";\n\nclass FactoredNumber {\n  public mult: number[];\n  constructor() {\n    this.mult = [];\n  }\n\n  public multiply(n: number): void {\n    for (let f = 2; f * f <= n; f++) {\n      while (n % f === 0) {\n        if (undefined !== this.mult[f]) {\n          this.mult[f]++;\n        } else {\n          this.mult[f] = 1;\n        }\n        n /= f;\n      }\n    }\n    if (n > 1) {\n      if (undefined !== this.mult[n]) {\n        this.mult[n]++;\n      } else {\n        this.mult[n] = 1;\n      }\n    }\n  }\n\n  public toString(): string {\n    let r = \"\";\n    for (let i = 0; i < this.mult.length; i++) {\n      if (undefined !== this.mult[i]) {\n        if (r !== \"\") {\n          r += \"*\";\n        }\n        r += i;\n        if (this.mult[i] > 1) {\n          r += `^${this.mult[i]}`;\n        }\n      }\n    }\n    return r;\n  }\n}\n\nexport function schreierSims(g: Perm[], disp: (s: string) => void): bigint {\n  const n = g[0].p.length;\n  const e = identity(n);\n  let sgs: Perm[][] = [];\n  let sgsi: Perm[][] = [];\n  let sgslen: number[][] = [];\n  let Tk: Perm[][] = [];\n  let Tklen: number[][] = [];\n  function resolve(p: Perm): boolean {\n    for (let i = p.p.length - 1; i >= 0; i--) {\n      const j = p.p[i];\n      if (j !== i) {\n        if (!sgs[i][j]) {\n          return false;\n        }\n        p = p.mul(sgsi[i][j]);\n      }\n    }\n    return true;\n  }\n  function knutha(k: number, p: Perm, len: number): void {\n    Tk[k].push(p);\n    Tklen[k].push(len);\n    for (let i = 0; i < sgs[k].length; i++) {\n      if (sgs[k][i]) {\n        knuthb(k, sgs[k][i].mul(p), len + sgslen[k][i]);\n      }\n    }\n  }\n  function knuthb(k: number, p: Perm, len: number): void {\n    const j = p.p[k];\n    if (!sgs[k][j]) {\n      sgs[k][j] = p;\n      sgsi[k][j] = p.inv();\n      sgslen[k][j] = len;\n      for (let i = 0; i < Tk[k].length; i++) {\n        knuthb(k, p.mul(Tk[k][i]), len + Tklen[k][i]);\n      }\n      return;\n    }\n    const p2 = p.mul(sgsi[k][j]);\n    if (!resolve(p2)) {\n      knutha(k - 1, p2, len + sgslen[k][j]);\n    }\n  }\n  function getsgs(): bigint {\n    sgs = [];\n    sgsi = [];\n    Tk = [];\n    sgslen = [];\n    Tklen = [];\n    for (let i = 0; i < n; i++) {\n      sgs.push([]);\n      sgsi.push([]);\n      sgslen.push([]);\n      Tk.push([]);\n      Tklen.push([]);\n      sgs[i][i] = e;\n      sgsi[i][i] = e;\n      sgslen[i][i] = 0;\n    }\n    let none = 0;\n    let sz = BigInt(1);\n    for (let i = 0; i < g.length; i++) {\n      knutha(n - 1, g[i], 1);\n      sz = BigInt(1);\n      let tks = 0;\n      let sollen = 0;\n      const avgs = [];\n      const mults = new FactoredNumber();\n      for (let j = 0; j < n; j++) {\n        let cnt = 0;\n        let lensum = 0;\n        for (let k = 0; k < n; k++) {\n          if (sgs[j][k]) {\n            cnt++;\n            lensum += sgslen[j][k];\n            if (j !== k) {\n              none++;\n            }\n          }\n        }\n        tks += Tk[j].length;\n        sz *= BigInt(cnt);\n        if (cnt > 1) {\n          mults.multiply(cnt);\n        }\n        const avg = lensum / cnt;\n        avgs.push(avg);\n        sollen += avg;\n      }\n      disp(\n        `${i}: sz ${sz} T ${tks} sol ${sollen} none ${none} mults ${mults.toString()}`,\n      );\n    }\n    return sz;\n  }\n  return getsgs();\n}\n","import { Move, QuantumMove } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\";\nimport { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport {\n  FaceRenamingMapper,\n  FTONotationMapper,\n  MegaminxScramblingNotationMapper,\n  type NotationMapper,\n  NullMapper,\n  NxNxNCubeMapper,\n  PyraminxNotationMapper,\n  SkewbNotationMapper,\n  TetraminxNotationMapper,\n} from \"./notation-mapping\";\nimport { remapKPuzzleDefinition } from \"./notation-mapping/NotationMapper\";\nimport {\n  type BaseFaceCount,\n  type FaceBasedOrientationDescription,\n  type FaceBasedOrientationDescriptionLookup,\n  PuzzleGeometryFullOptions,\n  type PuzzleGeometryOptions,\n} from \"./Options\";\nimport { iota, Perm, zeros } from \"./Perm\";\nimport {\n  externalName,\n  PGOrbit,\n  PGOrbitDef,\n  PGOrbitsDef,\n  PGTransform,\n  showcanon,\n  VisibleState,\n} from \"./PermOriSet\";\nimport {\n  PGPuzzles,\n  type PuzzleDescriptionString,\n  type PuzzleName,\n} from \"./PGPuzzles\";\nimport {\n  closure,\n  cube,\n  dodecahedron,\n  getface,\n  icosahedron,\n  octahedron,\n  tetrahedron,\n  uniqueplanes,\n} from \"./PlatonicGenerator\";\nimport { centermassface, Quat } from \"./Quat\";\nimport { schreierSims } from \"./SchreierSims\";\n\nexport interface TextureMapper {\n  getuv(fn: number, threed: number[]): number[];\n}\n\nexport interface StickerDatSticker {\n  coords: number[];\n  color: string;\n  orbit: string;\n  ord: number;\n  ori: number;\n  face: number;\n  isDup?: boolean;\n}\n\nexport interface StickerDatFace {\n  coords: number[];\n  name: string;\n}\n\nexport type StickerDatAxis = {\n  coordinates: number[];\n  quantumMove: Move;\n  order: number;\n};\n\nexport interface StickerDat {\n  stickers: StickerDatSticker[];\n  faces: StickerDatFace[];\n  axis: StickerDatAxis[];\n  unswizzle(mv: Move): Move | null;\n  notationMapper: NotationMapper;\n  textureMapper: TextureMapper;\n}\n\n// you can fill these in to help with timing if you want\nfunction tstart(s: string): string {\n  return s;\n}\n\nfunction tend(_: string): void {}\n\nclass Face {\n  private coords: number[];\n  public length: number;\n  constructor(q: Quat[]) {\n    this.coords = new Array(q.length * 3);\n    for (let i = 0; i < q.length; i++) {\n      this.coords[3 * i] = q[i].b;\n      this.coords[3 * i + 1] = q[i].c;\n      this.coords[3 * i + 2] = q[i].d;\n    }\n    this.length = q.length;\n  }\n\n  get(off: number): Quat {\n    return new Quat(\n      0,\n      this.coords[3 * off],\n      this.coords[3 * off + 1],\n      this.coords[3 * off + 2],\n    );\n  }\n\n  centermass(): Quat {\n    let sx = 0;\n    let sy = 0;\n    let sz = 0;\n    for (let i = 0; i < this.length; i++) {\n      sx += this.coords[3 * i];\n      sy += this.coords[3 * i + 1];\n      sz += this.coords[3 * i + 2];\n    }\n    return new Quat(0, sx / this.length, sy / this.length, sz / this.length);\n  }\n\n  rotate(q: Quat): Face {\n    const a = [];\n    for (let i = 0; i < this.length; i++) {\n      a.push(this.get(i).rotatepoint(q));\n    }\n    return new Face(a);\n  }\n\n  rotateforward(): Face {\n    const a = [];\n    for (let i = 1; i < this.length; i++) {\n      a.push(this.get(i));\n    }\n    a.push(this.get(0));\n    return new Face(a);\n  }\n}\n\nexport class FaceTree {\n  constructor(\n    private face: Quat[],\n    private left?: FaceTree,\n    private right?: FaceTree,\n  ) {}\n\n  public split(q: Quat): FaceTree {\n    const t = q.cutface(this.face);\n    if (t !== null) {\n      if (this.left === undefined) {\n        this.left = new FaceTree(t[0]);\n        this.right = new FaceTree(t[1]);\n      } else {\n        this.left = this.left?.split(q);\n        this.right = this.right?.split(q);\n      }\n    }\n    return this;\n  }\n\n  public collect(arr: Face[], leftfirst: boolean): Face[] {\n    if (this.left === undefined) {\n      arr.push(new Face(this.face));\n    } else if (leftfirst) {\n      this.left?.collect(arr, false);\n      this.right?.collect(arr, true);\n    } else {\n      this.right?.collect(arr, false);\n      this.left?.collect(arr, true);\n    }\n    return arr;\n  }\n}\n\nexport function expandfaces(rots: Quat[], faces: Face[]): Face[] {\n  // given a set of faces, expand by rotation set\n  const nfaces = [];\n  for (const rot of rots) {\n    for (const face of faces) {\n      nfaces.push(face.rotate(rot));\n    }\n  }\n  return nfaces;\n}\n\n//  Now we have a geometry class that does the 3D goemetry to calculate\n//  individual sticker information from a Platonic solid and a set of\n//  cuts.  The cuts must have the same symmetry as the Platonic solid;\n//  we even restrict them further to be either vertex-normal,\n//  edge-normal, or face-parallel cuts.  Right now our constructor takes\n//  a character solid indicator (one of c(ube), o(ctahedron), i(cosahedron),\n//  t(etradron), or d(odecahedron), followed by an array of cuts.\n//  Each cut is a character normal indicator that is either f(ace),\n//  e(dge), or v(ertex), followed by a floating point value that gives\n//  the depth of the cut where 0 is the center and 1 is the outside\n//  border of the shape in that direction.\n\n//  This is a heavyweight class with lots of members and construction\n//  is slow.  Be gentle.\n\n//  Everything except a very few methods should be considered private.\n\nconst eps: number = 1e-9;\nconst copyright = \"PuzzleGeometry 0.1 Copyright 2018 Tomas Rokicki.\";\nconst permissivieMoveParsing = false;\n\n// This is a description of the nets and the external names we give each\n// face.  The names should be a set of prefix-free upper-case alphabetics\n// so\n// we can easily also name and distinguish vertices and edges, but we\n// may change this in the future.  The nets consist of a list of lists.\n// Each list gives the name of a face, and then the names of the\n// faces connected to that face (in the net) in clockwise order.\n// The length of each list should be one more than the number of\n// edges in the regular polygon for that face.  All polygons must\n// have the same number of edges.\n// The first two faces in the first list must describe a horizontal edge\n// that is at the bottom of a regular polygon.  The first two faces in\n// every subsequent list for a given polytope must describe a edge that\n// is directly connected in the net and has already been described (this\n// sets the location and orientation of the polygon for that face.\n// Any edge that is not directly connected in the net should be given\n// the empty string as the other face.  All faces do not need to have\n// a list starting with that face; just enough to describe the full\n// connectivity of the net.\n//\n// TODO: change this back to a const JSON definition.\nfunction defaultnets(): any {\n  return {\n    // four faces: tetrahedron\n    4: [[\"F\", \"D\", \"L\", \"R\"]],\n    // six faces: cube\n    6: [\n      [\"F\", \"D\", \"L\", \"U\", \"R\"],\n      [\"R\", \"F\", \"\", \"B\", \"\"],\n    ],\n    // eight faces: octahedron\n    8: [\n      [\"F\", \"D\", \"L\", \"R\"],\n      [\"D\", \"F\", \"BR\", \"\"],\n      [\"BR\", \"D\", \"\", \"BB\"],\n      [\"BB\", \"BR\", \"U\", \"BL\"],\n    ],\n    // twelve faces:  dodecahedron; U/F/R/F/BL/BR from megaminx\n    12: [\n      [\"U\", \"F\", \"\", \"\", \"\", \"\"],\n      [\"F\", \"U\", \"R\", \"C\", \"A\", \"L\"],\n      [\"R\", \"F\", \"\", \"\", \"E\", \"\"],\n      [\"E\", \"R\", \"\", \"BF\", \"\", \"\"],\n      [\"BF\", \"E\", \"BR\", \"BL\", \"I\", \"D\"],\n    ],\n    // twenty faces: icosahedron\n    20: [\n      [\"R\", \"C\", \"F\", \"E\"],\n      [\"F\", \"R\", \"L\", \"U\"],\n      [\"L\", \"F\", \"A\", \"\"],\n      [\"E\", \"R\", \"G\", \"I\"],\n      [\"I\", \"E\", \"S\", \"H\"],\n      [\"S\", \"I\", \"J\", \"B\"],\n      [\"B\", \"S\", \"K\", \"D\"],\n      [\"K\", \"B\", \"M\", \"O\"],\n      [\"O\", \"K\", \"P\", \"N\"],\n      [\"P\", \"O\", \"Q\", \"\"],\n    ],\n  };\n}\n\nenum PGColors {\n  White = \"#ffffff\",\n  Orange = \"#ff8000\",\n  Green = \"#44ee00\",\n  Red = \"#ff0000\",\n  Blue = \"#2266ff\",\n  Yellow = \"#f4f400\",\n\n  Purple = \"#8800dd\",\n  Gray = \"#aaaaaa\",\n  Cream = \"#e8d0a0\",\n  Pink = \"#ff66cc\",\n\n  DarkBlue = \"#0000ff\",\n  Aqua = \"#3399ff\",\n  DarkGreen = \"#008800\",\n  Lime = \"#99ff00\",\n}\n\n// TODO: change this back to a const JSON definition.\nfunction defaultcolors(): any {\n  return {\n    // the colors should use the same naming convention as the nets, above.\n    4: {\n      F: PGColors.Green,\n      D: PGColors.Yellow,\n      L: PGColors.Red,\n      R: PGColors.Blue,\n    },\n    6: {\n      U: PGColors.White,\n      F: PGColors.Green,\n      R: PGColors.Red,\n      D: PGColors.Yellow,\n      B: PGColors.Blue,\n      L: PGColors.Orange,\n    },\n    8: {\n      U: PGColors.White,\n      F: PGColors.Red,\n      R: PGColors.Green,\n      D: PGColors.Yellow,\n      BB: PGColors.Blue,\n      L: PGColors.Purple,\n      BL: PGColors.Orange,\n      BR: PGColors.Gray,\n    },\n    12: {\n      U: PGColors.White,\n      F: PGColors.DarkGreen,\n      R: PGColors.Red,\n      C: PGColors.Cream,\n      A: PGColors.Aqua,\n      L: PGColors.Purple,\n      E: PGColors.Pink,\n      BF: PGColors.Lime,\n      BR: PGColors.DarkBlue,\n      BL: PGColors.Yellow,\n      I: PGColors.Orange,\n      D: PGColors.Gray,\n    },\n    20: {\n      R: \"#db69f0\",\n      C: \"#178fde\",\n      F: \"#23238b\",\n      E: \"#9cc726\",\n      L: \"#2c212d\",\n      U: \"#177fa7\",\n      A: \"#e0de7f\",\n      G: \"#2b57c0\",\n      I: \"#41126b\",\n      S: \"#4b8c28\",\n      H: \"#7c098d\",\n      J: \"#7fe7b4\",\n      B: \"#85fb74\",\n      K: \"#3f4bc3\",\n      D: \"#0ff555\",\n      M: \"#f1c2c8\",\n      O: \"#58d340\",\n      P: \"#c514f2\",\n      N: \"#14494e\",\n      Q: \"#8b1be1\",\n    },\n  };\n}\n\n// Orientation conventions are specified here.  For each of the five platonic\n// solids, by face count, we have three lists of \"cubie names\" consisting of\n// a concatenation of face names.  For vertex (corner) and edge cubies, the\n// first face in the concatenated name is the one that will be marked.\n// For center orientations, the first face specifies which center we are\n// referring to, and the second face specifies the direction of the mark for\n// that face.\n\nconst orientationDefaults = {\n  4: {\n    v: [\"DFR\", \"DLF\", \"DRL\", \"FLR\"],\n    e: [\"FR\", \"LF\", \"DF\", \"DL\", \"RD\", \"RL\"],\n    c: [\"DF\", \"FD\", \"RL\", \"LR\"],\n  },\n  6: {\n    v: [\"URF\", \"UBR\", \"ULB\", \"UFL\", \"DFR\", \"DRB\", \"DBL\", \"DLF\"],\n    e: [\"UF\", \"UR\", \"UB\", \"UL\", \"DF\", \"DR\", \"DB\", \"DL\", \"FR\", \"FL\", \"BR\", \"BL\"],\n    c: [\"UB\", \"LU\", \"FU\", \"RU\", \"BU\", \"DF\"],\n  },\n  8: {\n    v: [\"UBBBRR\", \"URFL\", \"ULBLBB\", \"DBRBBBL\", \"DBLLF\", \"DFRBR\"],\n    e: [\n      \"UL\",\n      \"UBB\",\n      \"UR\",\n      \"BRD\",\n      \"BLD\",\n      \"FD\",\n      \"BRR\",\n      \"FR\",\n      \"FL\",\n      \"BLL\",\n      \"BLBB\",\n      \"BRBB\",\n    ],\n    c: [\"BBU\", \"LU\", \"RU\", \"BRD\", \"FD\", \"BLD\", \"DF\", \"UBB\"],\n  },\n  12: {\n    v: [\n      \"URF\",\n      \"UFL\",\n      \"ULBL\",\n      \"UBLBR\",\n      \"UBRR\",\n      \"DEBF\",\n      \"DBFI\",\n      \"DIA\",\n      \"DAC\",\n      \"DCE\",\n      \"LAI\",\n      \"ALF\",\n      \"FCA\",\n      \"CFR\",\n      \"REC\",\n      \"ERBR\",\n      \"BRBFE\",\n      \"BFBRBL\",\n      \"BLIBF\",\n      \"IBLL\",\n    ],\n    e: [\n      \"UF\",\n      \"UR\",\n      \"UBR\",\n      \"UBL\",\n      \"UL\",\n      \"ER\",\n      \"EBR\",\n      \"EBF\",\n      \"ED\",\n      \"EC\",\n      \"IBF\",\n      \"IBL\",\n      \"IL\",\n      \"IA\",\n      \"ID\",\n      \"AC\",\n      \"CF\",\n      \"FA\",\n      \"BFBR\",\n      \"BRBL\",\n      \"BLBF\",\n      \"CD\",\n      \"AD\",\n      \"AL\",\n      \"FL\",\n      \"FR\",\n      \"CR\",\n      \"BFD\",\n      \"BRR\",\n      \"BLL\",\n    ],\n    c: [\n      \"UF\",\n      \"FU\",\n      \"DBF\",\n      \"BFD\",\n      \"AD\",\n      \"CD\",\n      \"BRU\",\n      \"BLU\",\n      \"LA\",\n      \"RA\",\n      \"EBR\",\n      \"IBL\",\n    ],\n  },\n  20: {\n    v: [\n      \"FLPQU\",\n      \"FUGER\",\n      \"FRCAL\",\n      \"HCREI\",\n      \"ISBDH\",\n      \"JSIEG\",\n      \"BSJMK\",\n      \"MQPOK\",\n      \"ONDBK\",\n      \"NOPLA\",\n      \"UQMJG\",\n      \"DNACH\",\n    ],\n    e: [\n      \"FU\",\n      \"FL\",\n      \"FR\",\n      \"EG\",\n      \"ER\",\n      \"EI\",\n      \"SJ\",\n      \"SI\",\n      \"SB\",\n      \"KM\",\n      \"KB\",\n      \"KO\",\n      \"PQ\",\n      \"PO\",\n      \"PL\",\n      \"UG\",\n      \"JG\",\n      \"MQ\",\n      \"UQ\",\n      \"HC\",\n      \"HD\",\n      \"ND\",\n      \"NA\",\n      \"JM\",\n      \"CA\",\n      \"AL\",\n      \"CR\",\n      \"HI\",\n      \"DB\",\n      \"NO\",\n    ],\n    c: [\n      \"FU\",\n      \"UF\",\n      \"GE\",\n      \"EG\",\n      \"JS\",\n      \"SJ\",\n      \"MK\",\n      \"KM\",\n      \"QP\",\n      \"PQ\",\n      \"LA\",\n      \"AL\",\n      \"RC\",\n      \"CR\",\n      \"IH\",\n      \"HI\",\n      \"BD\",\n      \"DB\",\n      \"ON\",\n      \"NO\",\n    ],\n  },\n};\n\n/*\n *  Default orientations for the puzzles in 3D space.  Can be overridden\n *  by puzzleOrientation or puzzleOrientations options.\n *\n *  These are defined to have a strong intuitive vertical (y) direction\n *  since 3D orbital controls need this.  In comments, we list the\n *  preferred initial camera orientation for each puzzle for twizzle;\n *  this information is explicitly given in the twizzle app file.\n */\n// TODO: change this back to a const JSON definition.\nfunction defaultOrientations(): FaceBasedOrientationDescriptionLookup {\n  return {\n    4: [\n      [\"FLR\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLR towards viewer\n    6: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // URF towards viewer\n    8: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLUR towards viewer\n    12: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n    20: [\n      [\"GUQMJ\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n  };\n}\n\nfunction findelement(a: Quat[][], p: Quat): number {\n  // find something in facenames, vertexnames, edgenames\n  for (let i = 0; i < a.length; i++) {\n    if (a[i][0].dist(p) < eps) {\n      return i;\n    }\n  }\n  throw new Error(\"Element not found\");\n}\n\nexport function getPG3DNamedPuzzles(): {\n  [s: string]: PuzzleDescriptionString;\n} {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles;\n}\n\nexport function getPuzzleDescriptionString(\n  puzzleName: PuzzleName,\n): PuzzleDescriptionString {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles[puzzleName];\n}\n\nexport const PUZZLE_BASE_SHAPES = [\"c\", \"t\", \"o\", \"d\", \"i\"] as const;\nexport type PuzzleBaseShape = (typeof PUZZLE_BASE_SHAPES)[number];\n\nexport const PUZZLE_CUT_TYPES = [\"f\", \"v\", \"e\"] as const;\nexport type PuzzleCutType = (typeof PUZZLE_CUT_TYPES)[number];\n\nexport type PuzzleCutDescription = { cutType: PuzzleCutType; distance: number };\nexport type PuzzleDescription = {\n  shape: PuzzleBaseShape;\n  cuts: PuzzleCutDescription[];\n};\n\nexport function parsePuzzleDescription(\n  s: PuzzleDescriptionString,\n): PuzzleDescription | null {\n  // parse a text description\n  const a = s.split(/ /).filter(Boolean);\n  if (a.length % 2 === 0) {\n    return null;\n  }\n  const shape = a[0];\n  if (\n    shape !== \"o\" &&\n    shape !== \"c\" &&\n    shape !== \"i\" &&\n    shape !== \"d\" &&\n    shape !== \"t\"\n  ) {\n    return null;\n  }\n  const cuts: PuzzleCutDescription[] = [];\n  for (let i = 1; i < a.length; i += 2) {\n    if (a[i] !== \"f\" && a[i] !== \"v\" && a[i] !== \"e\") {\n      return null;\n    }\n    cuts.push({\n      cutType: a[i] as PuzzleCutType,\n      distance: parseFloat(a[i + 1]),\n    });\n  }\n  return { shape, cuts };\n}\n\nexport function getPuzzleGeometryByDesc(\n  desc: string,\n  options: PuzzleGeometryOptions = {},\n): PuzzleGeometry {\n  const parsed = parsePuzzleDescription(desc);\n  if (parsed === null) {\n    throw new Error(\"Could not parse the puzzle description\");\n  }\n  const pg = new PuzzleGeometry(\n    parsed,\n    Object.assign({}, { allMoves: true } as PuzzleGeometryOptions, options),\n  );\n  pg.allstickers();\n  pg.genperms();\n  return pg;\n}\n\nexport function getPuzzleGeometryByName(\n  puzzleName: PuzzleName,\n  options?: PuzzleGeometryOptions,\n): PuzzleGeometry {\n  return getPuzzleGeometryByDesc(PGPuzzles[puzzleName], options);\n}\n\nfunction getmovename(\n  geo: any,\n  bits: number[],\n  slices: number,\n): [string, boolean] {\n  // generate a move name based on bits, slice, and geo\n  // if the move name is from the opposite face, say so.\n  // find the face that's turned.\n  let inverted = false;\n  if (slices - bits[1] < bits[0]) {\n    // flip if most of the move is on the other side\n    geo = [geo[2], geo[3], geo[0], geo[1]];\n    bits = [slices - bits[1], slices - bits[0]];\n    inverted = true;\n  }\n  let movenameFamily = geo[0] as string;\n  let movenamePrefix = \"\";\n  if (bits[0] === 0 && bits[1] === slices) {\n    movenameFamily = `${movenameFamily}v`;\n  } else if (bits[0] === bits[1]) {\n    if (bits[1] > 0) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else if (bits[0] === 0) {\n    movenameFamily = movenameFamily.toLowerCase();\n    if (bits[1] > 1) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else {\n    throw new Error(\n      `We only support slice and outer block moves right now. ${bits}`,\n    );\n  }\n  return [movenamePrefix + movenameFamily, inverted];\n}\n\n// split a geometrical element into face names.  Do greedy match.\n// Permit underscores between names.\nfunction splitByFaceNames(s: string, facenames: [Quat[], string][]): string[] {\n  const r: string[] = [];\n  let at = 0;\n  while (at < s.length) {\n    if (at > 0 && at < s.length && s[at] === \"_\") {\n      at++;\n    }\n    let currentMatch = \"\";\n    for (const facename of facenames) {\n      if (\n        s.substr(at).startsWith(facename[1]) &&\n        facename[1].length > currentMatch.length\n      ) {\n        currentMatch = facename[1];\n      }\n    }\n    if (currentMatch !== \"\") {\n      r.push(currentMatch);\n      at += currentMatch.length;\n    } else {\n      throw new Error(`Could not split ${s} into face names.`);\n    }\n  }\n  return r;\n}\n\nfunction toCoords(q: Quat, maxdist: number): number[] {\n  return [q.b / maxdist, -q.c / maxdist, q.d / maxdist];\n}\n\nfunction toFaceCoords(q: Face, maxdist: number): number[] {\n  const r = [];\n  const n = q.length;\n  for (let i = 0; i < n; i++) {\n    const pt = toCoords(q.get(n - i - 1), maxdist);\n    r[3 * i] = pt[0];\n    r[3 * i + 1] = pt[1];\n    r[3 * i + 2] = pt[2];\n  }\n  return r;\n}\n\ntype MoveSetGeo = [string, string, string, string, number];\n\n/** @category PuzzleGeometry */\nexport class PuzzleGeometry {\n  private rotations: Quat[]; // all members of the rotation group\n  public baseplanerot: Quat[]; // unique rotations of the baseplane\n  private baseplanes: Quat[]; // planes, corresponding to faces\n  private facenames: [Quat[], string][]; // face names\n  private faceplanes: [Quat, string][]; // face planes\n  private edgenames: [Quat, string][]; // edge names\n  private vertexnames: [Quat, string][]; // vertexnames\n  private geonormals: [Quat, string, string][]; // all geometric directions, with names and types\n  private moveplanes: Quat[]; // the planes that split moves\n  private moveplanes2: Quat[]; // the planes that split moves, filtered\n  public moveplanesets: Quat[][]; // the move planes, in parallel sets\n  private moveplanenormals: Quat[]; // one move plane\n  public movesetorders: number[]; // the order of rotations for each move set\n  public movesetgeos: MoveSetGeo[]; // geometric feature information for move sets\n  private basefaces: Face[]; // polytope faces before cuts\n  private faces: Face[]; // all the stickers\n  private facecentermass: Quat[]; // center of mass of all faces\n  private baseFaceCount: BaseFaceCount; // number of base faces\n  public stickersperface: number; // number of stickers per face\n  public shortedge: number; // number of stickers per face\n  private markedface: number[]; // given a bitmap of faces, identify the marked one\n  public cubies: number[][]; // the cubies\n  private vertexdistance: number; // vertex distance\n  private edgedistance: number; // edge distance\n  private facetocubie: number[]; // map a face to a cubie index\n  private facetoord: number[]; // map a face to a cubie ord\n  private moverotations: Quat[][]; // move rotations\n  private facelisthash: Map<string, number[]>; // face list by key\n  private cubiesetnames: string[]; // cubie set names\n  private cubieords: number[]; // the size of each orbit\n  private cubiesetnums: number[];\n  private cubieordnums: number[];\n  private orbitoris: number[]; // the orientation size of each orbit\n  private cubievaluemap: number[]; // the map for identical cubies\n  private cubiesetcubies: number[][]; // cubies in each cubie set\n  public cmovesbyslice: number[][][] = []; // cmoves as perms by slice\n  public parsedmovelist: [\n    string | undefined,\n    number,\n    number,\n    number,\n    boolean,\n    number,\n  ][]; // parsed move list\n\n  private duplicatedFaces: number[] = []; // which faces are duplicated\n  private duplicatedCubies: number[] = []; // which cubies are duplicated\n  private fixedCubie: number = -1; // fixed cubie, if any\n  private net: string[][] = [];\n  private colors: any = [];\n  private swizzler: FaceNameSwizzler;\n  public notationMapper: NotationMapper = new NullMapper();\n  private addNotationMapper: string = \"\";\n  private setReidOrder: boolean = false;\n\n  private options: PuzzleGeometryFullOptions;\n\n  constructor(\n    public puzzleDescription: PuzzleDescription,\n    options: PuzzleGeometryOptions,\n  ) {\n    const t1 = tstart(\"genperms\");\n    this.options = new PuzzleGeometryFullOptions(options);\n    if (this.options.verbosity > 0) {\n      console.log(this.header(\"# \"));\n    }\n    this.create(puzzleDescription);\n    tend(t1);\n  }\n\n  public create(puzzleDescription: PuzzleDescription): void {\n    const { shape, cuts } = puzzleDescription;\n\n    // create the shape, doing all the essential geometry\n    // create only goes far enough to figure out how many stickers per\n    // face, and what the short edge is.  If the short edge is too short,\n    // we probably don't want to display or manipulate this one.  How\n    // short is too short is hard to say.\n    this.moveplanes = [];\n    this.moveplanes2 = [];\n    this.faces = [];\n    this.cubies = [];\n    let g = null;\n    switch (shape) {\n      case \"c\": {\n        g = cube();\n        break;\n      }\n      case \"o\": {\n        g = octahedron();\n        break;\n      }\n      case \"i\": {\n        g = icosahedron();\n        break;\n      }\n      case \"t\": {\n        g = tetrahedron();\n        break;\n      }\n      case \"d\": {\n        g = dodecahedron();\n        break;\n      }\n      default:\n        throw new Error(`Bad shape argument: ${shape}`);\n    }\n    this.rotations = closure(g);\n    if (this.options.verbosity) {\n      console.log(`# Rotations: ${this.rotations.length}`);\n    }\n    const baseplane = g[0];\n    this.baseplanerot = uniqueplanes(baseplane, this.rotations);\n    const baseplanes = this.baseplanerot.map((_) => baseplane.rotateplane(_));\n    this.baseplanes = baseplanes;\n    this.baseFaceCount = baseplanes.length as BaseFaceCount;\n    const net = defaultnets()[baseplanes.length];\n    this.net = net;\n    this.colors = defaultcolors()[baseplanes.length];\n    if (this.options.verbosity > 0) {\n      console.log(`# Base planes: ${baseplanes.length}`);\n    }\n    const baseface = getface(baseplanes);\n    const zero = new Quat(0, 0, 0, 0);\n    if (this.options.verbosity > 0) {\n      console.log(`# Face vertices: ${baseface.length}`);\n    }\n    const facenormal = baseplanes[0].makenormal();\n    const edgenormal = baseface[0].sum(baseface[1]).makenormal();\n    const vertexnormal = baseface[0].makenormal();\n    const boundary = new Quat(1, facenormal.b, facenormal.c, facenormal.d);\n    if (this.options.verbosity > 0) {\n      console.log(`# Boundary is ${boundary}`);\n    }\n    const planerot = uniqueplanes(boundary, this.rotations);\n    const planes = planerot.map((_) => boundary.rotateplane(_));\n    const firstface = getface(planes);\n    this.edgedistance = firstface[0].sum(firstface[1]).smul(0.5).dist(zero);\n    this.vertexdistance = firstface[0].dist(zero);\n    const cutplanes = [];\n    const intersects = [];\n    let sawface = false; // what cuts did we see?\n    let sawedge = false;\n    let sawvertex = false;\n    for (const cut of cuts) {\n      let normal = null;\n      let distance = 0;\n      switch (cut.cutType) {\n        case \"f\": {\n          normal = facenormal;\n          distance = 1;\n          sawface = true;\n          break;\n        }\n        case \"v\": {\n          normal = vertexnormal;\n          distance = this.vertexdistance;\n          sawvertex = true;\n          break;\n        }\n        case \"e\": {\n          normal = edgenormal;\n          distance = this.edgedistance;\n          sawedge = true;\n          break;\n        }\n        default:\n          throw new Error(`Bad cut argument: ${cut.cutType}`);\n      }\n      cutplanes.push(normal.makecut(cut.distance));\n      intersects.push(cut.distance < distance);\n    }\n    if (this.options.addRotations) {\n      if (!sawface) {\n        cutplanes.push(facenormal.makecut(10));\n      }\n      if (!sawvertex) {\n        cutplanes.push(vertexnormal.makecut(10));\n      }\n      if (!sawedge) {\n        cutplanes.push(edgenormal.makecut(10));\n      }\n    }\n    this.basefaces = [];\n    for (const baseplanerot of this.baseplanerot) {\n      const face = baseplanerot.rotateface(firstface);\n      this.basefaces.push(new Face(face));\n    }\n    //\n    //   Determine names for edges, vertices, and planes.  Planes are defined\n    //   by the plane normal/distance; edges are defined by the midpoint;\n    //   vertices are defined by actual point.  In each case we define a name.\n    //   Note that edges have two potential names, and corners have n! where\n    //   n planes meet at a vertex.  We set names by choosing the marked face\n    //   first, and going counterclockwise around.\n    //\n    const facenames: [Quat[], string][] = [];\n    const faceplanes: [Quat, string][] = [];\n    const vertexnames: any[] = [];\n    const edgenames: any[] = [];\n    const edgesperface = firstface.length;\n    function searchaddelement(a: any[], p: Quat, name: any): void {\n      for (const el of a) {\n        if (el[0].dist(p) < eps) {\n          el.push(name);\n          return;\n        }\n      }\n      a.push([p, name]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        searchaddelement(edgenames, midpoint, i);\n      }\n    }\n    const otherfaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facelist = [];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const el = edgenames[findelement(edgenames, midpoint)];\n        if (i === el[1]) {\n          facelist.push(el[2]);\n        } else if (i === el[2]) {\n          facelist.push(el[1]);\n        } else {\n          throw new Error(\"Could not find edge\");\n        }\n      }\n      otherfaces.push(facelist);\n    }\n    const facenametoindex: any = {};\n    const faceindextoname: string[] = [];\n    faceindextoname.push(net[0][0]);\n    facenametoindex[net[0][0]] = 0;\n    faceindextoname[otherfaces[0][0]] = net[0][1];\n    facenametoindex[net[0][1]] = otherfaces[0][0];\n    for (const neti of net) {\n      const f0 = neti[0];\n      const fi = facenametoindex[f0];\n      if (fi === undefined) {\n        throw new Error(\"Bad edge description; first edge not connected\");\n      }\n      let ii = -1;\n      for (let j = 0; j < otherfaces[fi].length; j++) {\n        const fn2 = faceindextoname[otherfaces[fi][j]];\n        if (fn2 !== undefined && fn2 === neti[1]) {\n          ii = j;\n          break;\n        }\n      }\n      if (ii < 0) {\n        throw new Error(\"First element of a net not known\");\n      }\n      for (let j = 2; j < neti.length; j++) {\n        if (neti[j] === \"\") {\n          continue;\n        }\n        const of = otherfaces[fi][(j + ii - 1) % edgesperface];\n        const fn2 = faceindextoname[of];\n        if (fn2 !== undefined && fn2 !== neti[j]) {\n          throw new Error(\"Face mismatch in net\");\n        }\n        faceindextoname[of] = neti[j];\n        facenametoindex[neti[j]] = of;\n      }\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const faceplane = boundary.rotateplane(this.baseplanerot[i]);\n      const facename = faceindextoname[i];\n      facenames.push([face, facename]);\n      faceplanes.push([faceplane, facename]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facename = faceindextoname[i];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const jjj = (j + 2) % face.length;\n        const midpoint2 = face[jj].sum(face[jjj]).smul(0.5);\n        const e1 = findelement(edgenames, midpoint);\n        const e2 = findelement(edgenames, midpoint2);\n        searchaddelement(vertexnames, face[jj], [facename, e2, e1]);\n      }\n    }\n    this.swizzler = new FaceNameSwizzler(facenames.map((_) => _[1]));\n    const sep = this.swizzler.prefixFree ? \"\" : \"_\";\n    // fix the edge names; use face precedence order\n    const oridata = orientationDefaults[this.baseFaceCount];\n    const markedface = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      markedface[1 << i] = i;\n    }\n    // FIXME  eliminate the duplications below\n    {\n      const oriprefs = oridata[\"v\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"e\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"c\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        const bits = (1 << fn[0]) | (1 << this.baseFaceCount);\n        markedface[bits] = fn[1];\n      }\n    }\n    for (let i = 0; i < edgenames.length; i++) {\n      if (edgenames[i].length !== 3) {\n        throw new Error(`Bad length in edge names ${edgenames[i]}`);\n      }\n      const f1 = edgenames[i][1];\n      const f2 = edgenames[i][2];\n      let c1 = faceindextoname[f1];\n      const c2 = faceindextoname[f2];\n      const bits = (1 << f1) | (1 << f2);\n      if (markedface[bits] === f1) {\n        c1 = c1 + sep + c2;\n      } else {\n        c1 = c2 + sep + c1;\n      }\n      edgenames[i] = [edgenames[i][0], c1];\n    }\n    // fix the vertex names; counterclockwise rotations; proper orientation.\n    for (let i = 0; i < vertexnames.length; i++) {\n      let bits = 0;\n      if (vertexnames[i].length < 4) {\n        throw new Error(\"Bad length in vertex names\");\n      }\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        bits |= 1 << facenametoindex[vertexnames[i][j][0]];\n      }\n      const fi = markedface[bits];\n      let st = -1;\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (fi === facenametoindex[vertexnames[i][j][0]]) {\n          st = j;\n        }\n      }\n      if (st < 0) {\n        throw new Error(\n          \"Internal error; couldn't find face name when fixing corners\",\n        );\n      }\n      let r = \"\";\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (j === 1) {\n          r = vertexnames[i][st][0];\n        } else {\n          r = r + sep + vertexnames[i][st][0];\n        }\n        for (let k = 1; k < vertexnames[i].length; k++) {\n          if (vertexnames[i][st][1] === vertexnames[i][k][2]) {\n            st = k;\n            break;\n          }\n        }\n      }\n      vertexnames[i] = [vertexnames[i][0], r];\n    }\n    this.markedface = markedface;\n    if (this.options.verbosity > 1) {\n      console.log(`# Face names: ${facenames.map((_) => _[1]).join(\" \")}`);\n      // TODO\n      console.log(`# Edge names: ${edgenames.map((_) => _[1]).join(\" \")}`);\n      // TODO\n      console.log(`# Vertex names: ${vertexnames.map((_) => _[1]).join(\" \")}`);\n    }\n    const geonormals: [Quat, string, string][] = [];\n    for (const faceplane of faceplanes) {\n      geonormals.push([faceplane[0].makenormal(), faceplane[1], \"f\"]);\n    }\n    for (const edgename of edgenames) {\n      geonormals.push([edgename[0].makenormal(), edgename[1], \"e\"]);\n    }\n    for (const vertexname of vertexnames) {\n      geonormals.push([vertexname[0].makenormal(), vertexname[1], \"v\"]);\n    }\n    this.facenames = facenames;\n    this.faceplanes = faceplanes;\n    this.edgenames = edgenames;\n    this.vertexnames = vertexnames;\n    this.geonormals = geonormals;\n    const geonormalnames = geonormals.map((_) => _[1]);\n    this.swizzler.setGripNames(geonormalnames);\n    if (this.options.verbosity > 0) {\n      console.log(\n        `# Distances: face ${1} edge ${this.edgedistance} vertex ${\n          this.vertexdistance\n        }`,\n      );\n    }\n    // expand cutplanes by rotations.  We only work with one face here.\n    for (let c = 0; c < cutplanes.length; c++) {\n      for (const rotation of this.rotations) {\n        const q = cutplanes[c].rotateplane(rotation);\n        let wasseen = false;\n        for (const moveplane of this.moveplanes) {\n          if (q.sameplane(moveplane)) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          this.moveplanes.push(q);\n          if (intersects[c]) {\n            this.moveplanes2.push(q);\n          }\n        }\n      }\n    }\n    let ft = new FaceTree(firstface);\n    const tar = this.moveplanes2.slice();\n    // we want to use Math.random() here but we can't, because when\n    // we call multiple times we'll get different orbits/layouts.\n    // to resolve this, we use a very simple linear congruential\n    // generator.  for our purposes, the numbers don't need to be\n    // very random.\n    let rval = 31;\n    for (let i = 0; i < tar.length; i++) {\n      const j = i + Math.floor((tar.length - i) * (rval / 65536.0));\n      ft = ft.split(tar[j]);\n      tar[j] = tar[i];\n      rval = (rval * 1657 + 101) % 65536;\n    }\n    const faces = ft.collect([], true);\n    this.faces = faces;\n    if (this.options.verbosity > 0) {\n      console.log(`# Faces is now ${faces.length}`);\n    }\n    this.stickersperface = faces.length;\n    // the faces when rotated don't preserve the vertex order at this\n    // point.  to improve 3d rendering speed, we would like to preserve\n    // vertex order on rotation.  First, let's see what rotations preserve\n    // the base face; these are the ones we want to work with.\n    const simplerot: Quat[] = [];\n    const cm = centermassface(firstface);\n    for (const rotation of this.rotations) {\n      const f = rotation.rotateface(firstface);\n      if (cm.dist(centermassface(f)) < eps) {\n        simplerot.push(rotation);\n      }\n    }\n    const finished = new Array<boolean>(faces.length);\n    const sortme: [number, Quat, number][] = [];\n    for (let i = 0; i < faces.length; i++) {\n      const cm2 = faces[i].centermass();\n      sortme.push([cm.dist(cm2), cm2, i]);\n    }\n    sortme.sort((a, b) => a[0] - b[0]);\n    for (let ii = 0; ii < faces.length; ii++) {\n      const i = sortme[ii][2];\n      if (!finished[i]) {\n        finished[i] = true;\n        for (const rot of simplerot) {\n          const f2 = faces[i].rotate(rot);\n          const cm = f2.centermass();\n          for (let kk = ii + 1; kk < faces.length; kk++) {\n            if (sortme[kk][0] - sortme[ii][0] > eps) {\n              break;\n            }\n            const k = sortme[kk][2];\n            if (!finished[k] && cm.dist(sortme[kk][1]) < eps) {\n              finished[k] = true;\n              faces[k] = f2;\n              break;\n            }\n          }\n        }\n      }\n    }\n    //  Find and report the shortest edge in any of the faces.  If this\n    //  is small the puzzle is probably not practical or displayable.\n    this.shortedge = 1e99;\n    for (const face of faces) {\n      for (let j = 0; j < face.length; j++) {\n        const k = (j + 1) % face.length;\n        const t = face.get(j).dist(face.get(k));\n        if (t < this.shortedge) {\n          this.shortedge = t;\n        }\n      }\n    }\n    if (this.options.verbosity > 0) {\n      console.log(`# Short edge is ${this.shortedge}`);\n    }\n    // add nxnxn cube notation if it has cube face moves\n    if (shape === \"c\" && sawface && !sawedge && !sawvertex) {\n      // In this case the mapper adding is deferred until we\n      // know the number of slices.\n      this.addNotationMapper = \"NxNxNCubeMapper\";\n      // try to set Reid order of the cubies within an orbit\n      this.setReidOrder = true;\n    }\n    if (shape === \"c\" && sawvertex && !sawface && !sawedge) {\n      this.addNotationMapper = \"SkewbMapper\";\n    }\n    if (shape === \"t\" && (sawvertex || sawface) && !sawedge) {\n      this.addNotationMapper = \"PyraminxOrTetraminxMapper\";\n    }\n    if (shape === \"o\" && sawface) {\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\"F\", \"D\", \"L\", \"BL\", \"R\", \"U\", \"BR\", \"B\"]),\n      );\n      if (!(sawedge || sawvertex)) {\n        this.addNotationMapper = \"FTOMapper\";\n      }\n    }\n    if (shape === \"d\" && sawface) {\n      this.addNotationMapper = \"MegaminxMapper\";\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\n          \"U\",\n          \"F\",\n          \"L\",\n          \"BL\",\n          \"BR\",\n          \"R\",\n          \"FR\",\n          \"FL\",\n          \"DL\",\n          \"B\",\n          \"DR\",\n          \"D\",\n        ]),\n      );\n    }\n  }\n\n  private keyface(face: Face): string {\n    return this.keyface2(face.centermass());\n  }\n\n  private keyface2(cm: Quat): string {\n    // take a face and figure out the sides of each move plane\n    let s = \"\";\n    const sfcc = String.fromCharCode;\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        if (t < 47) {\n          s = s + sfcc(33 + t);\n        } else if (t < 47 + 47 * 47) {\n          s = s + sfcc(33 + 47 + Math.floor(t / 47) - 1) + sfcc(33 + (t % 47));\n        } else if (t < 47 + 47 * 47 + 47 * 47 * 47) {\n          s =\n            s +\n            sfcc(33 + 47 + Math.floor((t - 47) / (47 * 47) - 1)) +\n            sfcc(33 + 47 + (Math.floor((t - 47) / 47) % 47)) +\n            sfcc(33 + (t % 47));\n        } else {\n          throw Error(\"Too many slices for cubie encoding\");\n        }\n      }\n    }\n    return s;\n  }\n\n  // same as above, but instead of returning an encoded string, return\n  // an array with offsets.\n  private keyface3(face: Face): number[] {\n    const cm = face.centermass();\n    // take a face and figure out the sides of each move plane\n    const r = [];\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        r.push(t);\n      }\n    }\n    return r;\n  }\n\n  private findface(cm: Quat): number {\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash.get(key)!;\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash.get(key)![i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  private project2d(\n    facen: number,\n    edgen: number,\n    targvec: Quat[],\n  ): [Quat, Quat, Quat] {\n    // calculate geometry to map a particular edge of a particular\n    //  face to a given 2D vector.  The face is given as an index into the\n    //  facenames/baseplane arrays, and the edge is given as an offset into\n    //  the vertices.\n    const face = this.facenames[facen][0];\n    const edgen2 = (edgen + 1) % face.length;\n    const plane = this.baseplanes[facen];\n    let x0 = face[edgen2].sub(face[edgen]);\n    const olen = x0.len();\n    x0 = x0.normalize();\n    const y0 = x0.cross(plane).normalize();\n    let delta = targvec[1].sub(targvec[0]);\n    const len = delta.len() / olen;\n    delta = delta.normalize();\n    const cosr = delta.b;\n    const sinr = delta.c;\n    const x1 = x0.smul(cosr).sub(y0.smul(sinr)).smul(len);\n    const y1 = y0.smul(cosr).sum(x0.smul(sinr)).smul(len);\n    const off = new Quat(\n      0,\n      targvec[0].b - x1.dot(face[edgen]),\n      targvec[0].c - y1.dot(face[edgen]),\n      0,\n    );\n    return [x1, y1, off];\n  }\n\n  public allstickers(): void {\n    const t1 = tstart(\"allstickers\");\n    // next step is to calculate all the stickers and orbits\n    // We do enough work here to display the cube on the screen.\n    // take our newly split base face and expand it by the rotation matrix.\n    // this generates our full set of \"stickers\".\n    this.faces = expandfaces(this.baseplanerot, this.faces);\n    if (this.options.verbosity > 0) {\n      console.log(`# Total stickers is now ${this.faces.length}`);\n    }\n    this.facecentermass = new Array(this.faces.length);\n    for (let i = 0; i < this.faces.length; i++) {\n      this.facecentermass[i] = this.faces[i].centermass();\n    }\n    // Split moveplanes into a list of parallel planes.\n    const moveplanesets: Quat[][] = [];\n    const moveplanenormals: Quat[] = [];\n    // get the normals, first, from unfiltered moveplanes.\n    for (const q of this.moveplanes) {\n      const qnormal = q.makenormal();\n      let wasseen = false;\n      for (const moveplanenormal of moveplanenormals) {\n        if (qnormal.sameplane(moveplanenormal.makenormal())) {\n          wasseen = true;\n        }\n      }\n      if (!wasseen) {\n        moveplanenormals.push(qnormal);\n        moveplanesets.push([]);\n      }\n    }\n    for (const q of this.moveplanes2) {\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moveplanesets[j].push(q);\n          break;\n        }\n      }\n    }\n    // make the normals all face the same way in each set.\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const q: Quat[] = moveplanesets[i].map((_) => _.normalizeplane());\n      const goodnormal = moveplanenormals[i];\n      for (let j = 0; j < q.length; j++) {\n        if (q[j].makenormal().dist(goodnormal) > eps) {\n          q[j] = q[j].smul(-1);\n        }\n      }\n      q.sort((a, b) => a.a - b.a);\n      moveplanesets[i] = q;\n    }\n    this.moveplanesets = moveplanesets;\n    this.moveplanenormals = moveplanenormals;\n    const sizes = moveplanesets.map((_) => _.length);\n    if (this.options.verbosity > 0) {\n      console.log(`# Move plane sets: ${sizes}`);\n    }\n    // for each of the move planes, find the rotations that are relevant\n    const moverotations: Quat[][] = [];\n    for (let i = 0; i < moveplanesets.length; i++) {\n      moverotations.push([]);\n    }\n    for (const q of this.rotations) {\n      if (Math.abs(Math.abs(q.a) - 1) < eps) {\n        continue;\n      }\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanesets.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moverotations[j].push(q);\n          break;\n        }\n      }\n    }\n    this.moverotations = moverotations;\n    //  Sort the rotations by the angle of rotation.  A bit tricky because\n    //  while the norms should be the same, they need not be.  So we start\n    //  by making the norms the same, and then sorting.\n    for (let i = 0; i < moverotations.length; i++) {\n      const r = moverotations[i];\n      const goodnormal = r[0].makenormal();\n      for (let j = 0; j < r.length; j++) {\n        if (goodnormal.dist(r[j].makenormal()) > eps) {\n          r[j] = r[j].smul(-1);\n        }\n      }\n      r.sort((a, b) => a.angle() - b.angle());\n      if (moverotations[i][0].dot(moveplanenormals[i]) < 0) {\n        r.reverse();\n      }\n    }\n    const sizes2 = moverotations.map((_) => 1 + _.length);\n    this.movesetorders = sizes2;\n    const movesetgeos: MoveSetGeo[] = [];\n    let gtype = \"?\";\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const p0 = moveplanenormals[i];\n      let neg = null;\n      let pos = null;\n      for (const geonormal of this.geonormals) {\n        const d = p0.dot(geonormal[0]);\n        if (Math.abs(d - 1) < eps) {\n          pos = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        } else if (Math.abs(d + 1) < eps) {\n          neg = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        }\n      }\n      if (pos === null || neg === null) {\n        throw new Error(\"Saw positive or negative sides as null\");\n      }\n      movesetgeos.push([\n        pos[0],\n        pos[1],\n        neg[0],\n        neg[1],\n        1 + moveplanesets[i].length,\n      ]);\n      if (this.addNotationMapper === \"NxNxNCubeMapper\" && gtype === \"f\") {\n        this.notationMapper = new NxNxNCubeMapper(1 + moveplanesets[i].length);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"SkewbMapper\" &&\n        moveplanesets[0].length === 1\n      ) {\n        this.notationMapper = new SkewbNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"PyraminxOrTetraminxMapper\") {\n        if (\n          moveplanesets[0].length === 2 &&\n          moveplanesets[0][0].a === 0.333333333333333 &&\n          moveplanesets[0][1].a === 1.66666666666667\n        ) {\n          this.notationMapper = new PyraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        } else {\n          this.notationMapper = new TetraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        }\n      }\n      if (this.addNotationMapper === \"MegaminxMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new MegaminxScramblingNotationMapper(\n            this.notationMapper,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"FTOMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new FTONotationMapper(\n            this.notationMapper,\n            this.swizzler,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n    }\n    this.movesetgeos = movesetgeos;\n    //  Cubies are split by move plane sets.  For each cubie we can\n    //  average its points to find a point on the interior of that\n    //  cubie.  We can then check that point against all the move\n    //  planes and from that derive a coordinate for the cubie.\n    //  This also works for faces; no face should ever lie on a move\n    //  plane.  This allows us to take a set of stickers and break\n    //  them up into cubie sets.\n    const facelisthash = new Map();\n    const faces = this.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      const s = this.keyface(face);\n      if (!facelisthash.get(s)) {\n        facelisthash.set(s, [i]);\n      } else {\n        const arr = facelisthash.get(s)!;\n        arr.push(i);\n        //  If we find a core cubie, split it up into multiple cubies,\n        //  because ksolve doesn't handle orientations that are not\n        //  cyclic, and the rotation group of the core is not cyclic.\n        if (arr.length === this.baseFaceCount) {\n          if (this.options.verbosity > 0) {\n            console.log(\"# Splitting core.\");\n          }\n          for (let suff = 0; suff < arr.length; suff++) {\n            const s2 = `${s} ${suff}`;\n            facelisthash.set(s2, [arr[suff]]);\n          }\n        }\n      }\n    }\n    this.facelisthash = facelisthash;\n    if (this.options.verbosity > 0) {\n      console.log(`# Cubies: ${facelisthash.size}`);\n    }\n    const cubies: number[][] = [];\n    const facetocubie = [];\n    const facetoord = [];\n    for (const facelist of facelisthash.values()) {\n      if (facelist.length === this.baseFaceCount) {\n        // this is the original \"cubie\" of a split core; we ignore it.\n        continue;\n      }\n      //  Sort the faces around each corner so they are counterclockwise.  Only\n      //  relevant for cubies that actually are corners (three or more\n      //  faces).  In general cubies might have many faces; for icosohedrons\n      //  there are five faces on the corner cubies.\n      if (facelist.length > 1) {\n        const cm = facelist.map((_: number) => faces[_].centermass());\n        const cmall = centermassface(cm);\n        for (let looplimit = 0; facelist.length > 2; looplimit++) {\n          let changed = false;\n          for (let i = 0; i < facelist.length; i++) {\n            const j = (i + 1) % facelist.length;\n            // var ttt = cmall.dot(cm[i].cross(cm[j])) ; // TODO\n            if (cmall.dot(cm[i].cross(cm[j])) < 0) {\n              const u = cm[i];\n              cm[i] = cm[j];\n              cm[j] = u;\n              const v = facelist[i];\n              facelist[i] = facelist[j];\n              facelist[j] = v;\n              changed = true;\n            }\n          }\n          if (!changed) {\n            break;\n          }\n          if (looplimit > 1000) {\n            throw new Error(\"Bad epsilon math; too close to border\");\n          }\n        }\n        // set the orientations by finding the marked face and putting it first.\n        let bits = 0;\n        for (const f of facelist) {\n          bits |= 1 << Math.floor(f / this.stickersperface);\n        }\n        const markedface = this.markedface[bits]!;\n        let mini = -1;\n        for (let i = 0; i < facelist.length; i++) {\n          if (Math.floor(facelist[i] / this.stickersperface) === markedface) {\n            mini = i;\n          }\n        }\n        if (mini < 0) {\n          throw new Error(\"Could not find marked face in list\");\n        }\n        if (mini !== 0) {\n          const ofacelist = facelist.slice();\n          for (let i = 0; i < facelist.length; i++) {\n            facelist[i] = ofacelist[(mini + i) % facelist.length];\n          }\n        }\n      }\n      for (let j = 0; j < facelist.length; j++) {\n        const k = facelist[j];\n        facetocubie[k] = cubies.length;\n        facetoord[k] = j;\n      }\n      cubies.push(facelist);\n    }\n    this.cubies = cubies;\n    this.facetocubie = facetocubie;\n    this.facetoord = facetoord;\n    //  Calculate the orbits of each cubie.  Assumes we do all moves.\n    //  Also calculates which cubies are identical.\n    const typenames = [\"?\", \"CENTERS\", \"EDGES\", \"CORNERS\", \"C4RNER\", \"C5RNER\"];\n    const cubiesetnames = [];\n    const cubietypecounts = [0, 0, 0, 0, 0, 0];\n    const orbitoris = [];\n    const seen = [];\n    let cubiesetnum = 0;\n    const cubiesetnums = [];\n    const cubieordnums = [];\n    const cubieords = [];\n    const cubievaluemap = [];\n    // Later we will make this smarter to use a get color for face function\n    // so we support puzzles with multiple faces the same color\n    const getcolorkey = (cubienum: number): string => {\n      return cubies[cubienum].map((_) => this.getfaceindex(_)).join(\" \");\n    };\n    const cubiesetcubies: any = [];\n    for (let i = 0; i < cubies.length; i++) {\n      const cubie = cubies[i];\n      if (cubie.length === 0) {\n        continue;\n      }\n      if (seen[i]) {\n        continue;\n      }\n      const cubiekeymap: any = {};\n      let cubievalueid = 0;\n      cubieords.push(0);\n      cubiesetcubies.push([]);\n      const facecnt = cubie.length;\n      const typectr = cubietypecounts[facecnt]++;\n      let typename = typenames[facecnt];\n      if (typename === undefined || facecnt === this.baseFaceCount) {\n        typename = \"CORE\";\n      }\n      typename = typename + (typectr === 0 ? \"\" : typectr + 1);\n      cubiesetnames[cubiesetnum] = typename;\n      orbitoris[cubiesetnum] = facecnt;\n      const queue = [i];\n      let qg = 0;\n      seen[i] = true;\n      while (qg < queue.length) {\n        const cind = queue[qg++];\n        const cubiecolorkey = getcolorkey(cind);\n        if (cubie.length > 1 || cubiekeymap[cubiecolorkey] === undefined) {\n          cubiekeymap[cubiecolorkey] = cubievalueid++;\n        }\n        cubievaluemap[cind] = cubiekeymap[cubiecolorkey];\n        cubiesetnums[cind] = cubiesetnum;\n        cubiesetcubies[cubiesetnum].push(cind);\n        cubieordnums[cind] = cubieords[cubiesetnum]++;\n        if (queue.length < this.rotations.length) {\n          const cm = this.facecentermass[cubies[cind][0]];\n          for (const moverotation of moverotations) {\n            const tq =\n              this.facetocubie[this.findface(cm.rotatepoint(moverotation[0]))];\n            if (!seen[tq]) {\n              queue.push(tq);\n              seen[tq] = true;\n            }\n          }\n        }\n      }\n      cubiesetnum++;\n    }\n    if (\n      this.setReidOrder &&\n      4 <= this.stickersperface &&\n      this.stickersperface <= 9\n    ) {\n      const reidorder = [\n        [\n          \"UF\",\n          \"UR\",\n          \"UB\",\n          \"UL\",\n          \"DF\",\n          \"DR\",\n          \"DB\",\n          \"DL\",\n          \"FR\",\n          \"FL\",\n          \"BR\",\n          \"BL\",\n        ],\n        [\"UFR\", \"URB\", \"UBL\", \"ULF\", \"DRF\", \"DFL\", \"DLB\", \"DBR\"],\n        [\"U\", \"L\", \"F\", \"R\", \"B\", \"D\"],\n      ];\n      const reidmap: { [key: number]: number } = {};\n      for (const cubie of reidorder) {\n        for (let j = 0; j < cubie.length; j++) {\n          let mask = 0;\n          for (let k = 0; k < cubie[j].length; k++) {\n            mask |= 1 << (cubie[j].charCodeAt(k) - 65);\n          }\n          reidmap[mask] = j;\n        }\n      }\n      for (const cubieset of cubiesetcubies) {\n        for (const cubienum of cubieset) {\n          let mask = 0;\n          for (const cubie of cubies[cubienum]) {\n            mask |=\n              1 <<\n              (this.facenames[this.getfaceindex(cubie)][1].charCodeAt(0) - 65);\n          }\n          cubieordnums[cubienum] = reidmap[mask];\n        }\n      }\n    }\n    this.cubiesetnums = cubiesetnums;\n    this.cubieordnums = cubieordnums;\n    this.cubiesetnames = cubiesetnames;\n    this.cubieords = cubieords;\n    this.orbitoris = orbitoris;\n    this.cubievaluemap = cubievaluemap;\n    this.cubiesetcubies = cubiesetcubies;\n    // if we fix a cubie, find a cubie to fix\n    if (this.options.fixedPieceType !== null) {\n      for (let i = 0; i < cubies.length; i++) {\n        if (\n          (this.options.fixedPieceType === \"v\" && cubies[i].length > 2) ||\n          (this.options.fixedPieceType === \"e\" && cubies[i].length === 2) ||\n          (this.options.fixedPieceType === \"f\" && cubies[i].length === 1)\n        ) {\n          this.fixedCubie = i;\n          break;\n        }\n      }\n      if (this.fixedCubie < 0) {\n        throw new Error(\n          `Could not find a cubie of type ${this.options.fixedPieceType} to fix.`,\n        );\n      }\n    }\n    // show the orbits\n    if (this.options.verbosity > 0) {\n      console.log(`# Cubie orbit sizes ${cubieords}`);\n    }\n    tend(t1);\n  }\n\n  public unswizzle(mv: Move): Move | null {\n    const newmv = this.notationMapper.notationToInternal(mv);\n    if (newmv === null) {\n      return null;\n    }\n    return newmv.modified({ family: this.swizzler.unswizzle(newmv.family) });\n  }\n\n  // We use an extremely permissive parse here; any character but\n  // digits are allowed in a family name.\n  private stringToBlockMove(mv: string): Move {\n    // parse a move from the command line\n    const re = /^(([0-9]+)-)?([0-9]+)?([^0-9]+)([0-9]+'?)?$/;\n    const p = mv.match(re);\n    if (p === null) {\n      throw new Error(`Bad move passed ${mv}`);\n    }\n    const grip = p[4];\n    let loslice = undefined;\n    let hislice = undefined;\n    if (p[2] !== undefined) {\n      if (p[3] === undefined) {\n        throw new Error(\"Missing second number in range\");\n      }\n      loslice = parseInt(p[2], 10);\n    }\n    if (p[3] !== undefined) {\n      hislice = parseInt(p[3], 10);\n    }\n    let amountstr = \"1\";\n    let amount = 1;\n    if (p[5] !== undefined) {\n      amountstr = p[5];\n      if (amountstr[0] === \"'\") {\n        amountstr = `-${amountstr.substring(1)}`;\n      }\n      amount = parseInt(amountstr, 10);\n    }\n    return new Move(new QuantumMove(grip, hislice, loslice), amount);\n  }\n\n  public parseMove(\n    move: Move,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const bm = this.notationMapper.notationToInternal(move); // pluggable notation\n    if (bm === null) {\n      throw new Error(`Bad move ${move.family}`);\n    }\n    move = bm;\n    let grip = move.family;\n    let fullrotation = false;\n    if (grip.endsWith(\"v\") && grip[0] <= \"Z\") {\n      if (move.innerLayer !== undefined || move.outerLayer !== undefined) {\n        throw new Error(\"Cannot use a prefix with full cube rotations\");\n      }\n      grip = grip.slice(0, -1);\n      fullrotation = true;\n    }\n    if (grip.endsWith(\"w\") && grip[0] <= \"Z\") {\n      grip = grip.slice(0, -1).toLowerCase();\n    }\n    let geo: MoveSetGeo | undefined;\n    let msi = -1;\n    const geoname = this.swizzler.unswizzle(grip);\n    let firstgrip = false;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const g = this.movesetgeos[i];\n      if (geoname === g[0]) {\n        firstgrip = true;\n        geo = g;\n        msi = i;\n      }\n      if (geoname === g[2]) {\n        firstgrip = false;\n        geo = g;\n        msi = i;\n      }\n    }\n    let loslice = 1;\n    let hislice = 1;\n    if (grip.toUpperCase() !== grip) {\n      hislice = 2;\n    }\n    if (geo === undefined) {\n      throw new Error(`Bad grip in move ${move.family}`);\n    }\n    if (move.outerLayer !== undefined) {\n      loslice = move.outerLayer;\n    }\n    if (move.innerLayer !== undefined) {\n      if (move.outerLayer === undefined) {\n        hislice = move.innerLayer;\n        // big assumption here!  if outerlayer not specified, but inner\n        // layer is (like 2U), we use the case of the family (upper vs\n        // lower) to decide if it should be a slice turn or a wide turn.\n        if (grip <= \"Z\") {\n          // uppercase; slice move\n          loslice = hislice;\n        } else {\n          // lowercase; wide move\n          loslice = 1;\n        }\n      } else {\n        hislice = move.innerLayer;\n      }\n    }\n    loslice--;\n    hislice--;\n    if (fullrotation) {\n      loslice = 0;\n      hislice = this.moveplanesets[msi].length;\n    }\n    if (\n      loslice < 0 ||\n      loslice > this.moveplanesets[msi].length ||\n      hislice < 0 ||\n      hislice > this.moveplanesets[msi].length\n    ) {\n      throw new Error(\n        `Bad slice spec ${loslice} ${hislice} vs ${this.moveplanesets[msi].length}`,\n      );\n    }\n    if (\n      !permissivieMoveParsing &&\n      loslice === 0 &&\n      hislice === this.moveplanesets[msi].length &&\n      !fullrotation\n    ) {\n      throw new Error(\n        \"! full puzzle rotations must be specified with v suffix.\",\n      );\n    }\n    return [undefined, msi, loslice, hislice, firstgrip, move.amount];\n  }\n\n  private parsemove(\n    mv: string,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const r = this.parseMove(this.stringToBlockMove(mv));\n    r[0] = mv;\n    return r;\n  }\n\n  public genperms(): void {\n    const t1 = tstart(\"genperms\");\n    // generate permutations for moves\n    if (this.cmovesbyslice.length > 0) {\n      // did this already?\n      return;\n    }\n    const cmovesbyslice = [];\n    // if orientCenters is set, we find all cubies that have only one\n    // sticker and that sticker is in the center of a face, and we\n    // introduce duplicate stickers so we can orient them properly.\n    //\n    //  We also rotate the vertices of the face to enforce the orientation\n    //  preferences for the oriented center stickers.\n    if (this.options.orientCenters) {\n      for (let k = 0; k < this.cubies.length; k++) {\n        if (this.cubies[k].length === 1) {\n          const kk = this.cubies[k][0];\n          const i = this.getfaceindex(kk);\n          const center = this.basefaces[i].centermass();\n          if (center.dist(this.facecentermass[kk]) < eps) {\n            const bits = (1 << i) | (1 << this.baseFaceCount);\n            const towards = this.markedface[bits];\n            const normal = this.baseplanes[towards].makenormal();\n            let hiv = -1;\n            let hii = -1;\n            for (let ii = 0; ii < this.faces[kk].length; ii++) {\n              const pt = this.faces[kk].get(ii);\n              const t = normal.dot(pt.sub(center));\n              if (t > hiv) {\n                hiv = t;\n                hii = ii;\n              }\n            }\n            // if two pts have the same distance, prefer the second\n            const hii2 = (hii + 1) % this.faces[kk].length;\n            if (\n              Math.abs(normal.dot(this.faces[kk].get(hii2).sub(center)) - hiv) <\n              eps\n            ) {\n              hii = hii2;\n            }\n            // remake the face to preserve orientations\n            if (hii !== 0) {\n              const qs = [];\n              for (let ii = 0; ii < this.faces[kk].length; ii++) {\n                qs.push(this.faces[kk].get((ii + hii) % this.faces[kk].length));\n              }\n              this.faces[kk] = new Face(qs);\n            }\n            const o = this.basefaces[i].length;\n            for (let m = 1; m < o; m++) {\n              this.cubies[k].push(this.cubies[k][m - 1]);\n            }\n            this.duplicatedFaces[kk] = o;\n            this.duplicatedCubies[k] = o;\n            this.orbitoris[this.cubiesetnums[k]] = o;\n          }\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slicenum = [];\n      const slicecnts = [moveplaneset.length + 1, 0];\n      let bhi = 1;\n      while (bhi * 2 <= moveplaneset.length) {\n        bhi *= 2;\n      }\n      for (let i = 0; i < this.faces.length; i++) {\n        let t = 0;\n        if (moveplaneset.length > 0) {\n          const dv = this.facecentermass[i].dot(moveplaneset[0]);\n          for (let b = bhi; b > 0; b >>= 1) {\n            if (\n              t + b <= moveplaneset.length &&\n              dv > moveplaneset[t + b - 1].a\n            ) {\n              t += b;\n            }\n          }\n          t = moveplaneset.length - t;\n        }\n        slicenum.push(t);\n        while (slicecnts.length <= t) {\n          slicecnts.push(0);\n        }\n        slicecnts[t]++;\n      }\n      const axiscmoves = new Array(slicecnts.length);\n      for (let sc = 0; sc < slicecnts.length; sc++) {\n        axiscmoves[sc] = [];\n      }\n      const cubiedone = [];\n      for (let i = 0; i < this.faces.length; i++) {\n        if (slicenum[i] < 0) {\n          continue;\n        }\n        const b = [this.facetocubie[i], this.facetoord[i]];\n        let cm = this.facecentermass[i];\n        const ocm = cm;\n        let fi2 = i;\n        const sc = slicenum[fi2];\n        for (;;) {\n          slicenum[fi2] = -1;\n          const cm2 = cm.rotatepoint(this.moverotations[k][0]);\n          if (cm2.dist(ocm) < eps) {\n            break;\n          }\n          fi2 = this.findface(cm2);\n          b.push(this.facetocubie[fi2], this.facetoord[fi2]);\n          cm = cm2;\n        }\n        // If an oriented center is moving, we need to figure out\n        // the appropriate new orientation.  Normally we use the cubie\n        // sticker identity to locate, but this doesn't work here.\n        // Instead we need to redo the geometry of the sticker itself\n        // rotating and figure out how that maps to the destination\n        // sticker.\n        //\n        // We only need to do this for central center stickers: those\n        // where the face vertex goes through the center.  The others\n        // don't actually need orientation because they can only be\n        // in one orientation by physical constraints.  (You can't spin\n        // a point or cross sticker on the 5x5x5, for example.)\n        //\n        // This also simplifies things because it means the actual\n        // remapping has the same order as the moves themselves.\n        //\n        // The center may or may not have been duplicated at this point.\n        //\n        // The move moving the center might not be the same modulo as the\n        // center itself.\n        if (\n          b.length > 2 &&\n          this.options.orientCenters &&\n          (this.cubies[b[0]].length === 1 || this.duplicatedCubies[b[0]] > 1)\n        ) {\n          // is this a real center cubie, around an axis?\n          if (\n            this.facecentermass[i].dist(\n              this.basefaces[this.getfaceindex(i)].centermass(),\n            ) < eps\n          ) {\n            // how does remapping of the face/point set map to the original?\n            let face1 = this.faces[this.cubies[b[0]][0]];\n            for (let ii = 0; ii < b.length; ii += 2) {\n              const face0 = this.faces[this.cubies[b[ii]][0]];\n              let o = -1;\n              for (let jj = 0; jj < face1.length; jj++) {\n                if (face0.get(jj).dist(face1.get(0)) < eps) {\n                  o = jj;\n                  break;\n                }\n              }\n              if (o < 0) {\n                throw new Error(\n                  \"Couldn't find rotation of center faces; ignoring for now.\",\n                );\n              } else {\n                b[ii + 1] = o;\n                face1 = face1.rotate(this.moverotations[k][0]);\n              }\n            }\n          }\n        }\n        // b.length === 2 means a sticker is spinning in place.\n        // in this case we add duplicate stickers\n        // so that we can make it animate properly in a 3D world.\n        if (b.length === 2 && this.options.orientCenters) {\n          for (let ii = 1; ii < this.movesetorders[k]; ii++) {\n            if (sc === 0) {\n              b.push(b[0], ii);\n            } else {\n              b.push(\n                b[0],\n                (this.movesetorders[k] - ii) % this.movesetorders[k],\n              );\n            }\n          }\n        }\n        if (b.length > 2 && !cubiedone[b[0]]) {\n          if (b.length !== 2 * this.movesetorders[k]) {\n            throw new Error(\"Bad length in perm gen\");\n          }\n          for (const v of b) {\n            axiscmoves[sc].push(v);\n          }\n        }\n        for (let j = 0; j < b.length; j += 2) {\n          cubiedone[b[j]] = true;\n        }\n      }\n      for (let kk = 0; kk < axiscmoves.length; kk++) {\n        axiscmoves[kk] = axiscmoves[kk].slice();\n      }\n      cmovesbyslice.push(axiscmoves);\n    }\n    this.cmovesbyslice = cmovesbyslice;\n    if (this.options.moveList) {\n      const parsedmovelist: [\n        string | undefined,\n        number,\n        number,\n        number,\n        boolean,\n        number,\n      ][] = [];\n      // make sure the movelist makes sense based on the geos.\n      for (const moveString of this.options.moveList) {\n        parsedmovelist.push(this.parsemove(moveString));\n      }\n      this.parsedmovelist = parsedmovelist;\n    }\n    this.facelisthash.clear();\n    this.facecentermass = [];\n    tend(t1);\n  }\n\n  private getboundarygeometry(): any {\n    // get the boundary geometry\n    return {\n      baseplanes: this.baseplanes,\n      facenames: this.facenames,\n      faceplanes: this.faceplanes,\n      vertexnames: this.vertexnames,\n      edgenames: this.edgenames,\n      geonormals: this.geonormals,\n    };\n  }\n\n  private getmovesets(k: number): any {\n    // get the move sets we support based on slices\n    // for even values we omit the middle \"slice\".  This isn't perfect\n    // but it is what we do for now.\n    // if there was a move list specified, pull values from that\n    const slices = this.moveplanesets[k].length;\n    let r: any[] = [];\n    if (this.parsedmovelist !== undefined) {\n      for (const parsedmove of this.parsedmovelist) {\n        if (parsedmove[1] !== k) {\n          continue;\n        }\n        if (parsedmove[4]) {\n          r.push([parsedmove[2], parsedmove[3]]);\n        } else {\n          r.push([slices - parsedmove[3], slices - parsedmove[2]]);\n        }\n        r.push(parsedmove[5]);\n      }\n    } else if (this.options.vertexMoves && !this.options.allMoves) {\n      const msg = this.movesetgeos[k];\n      if (msg[1] !== msg[3]) {\n        for (let i = 0; i < slices; i++) {\n          if (msg[1] !== \"v\") {\n            if (this.options.outerBlockMoves) {\n              r.push([i + 1, slices]);\n            } else {\n              r.push([i + 1]);\n            }\n            r.push(1);\n          } else {\n            if (this.options.outerBlockMoves) {\n              r.push([0, i]);\n            } else {\n              r.push([i, i]);\n            }\n            r.push(1);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i <= slices; i++) {\n        if (!this.options.allMoves && i + i === slices) {\n          continue;\n        }\n        if (this.options.outerBlockMoves) {\n          if (i + i > slices) {\n            r.push([i, slices]);\n          } else {\n            r.push([0, i]);\n          }\n        } else {\n          r.push([i, i]);\n        }\n        r.push(1);\n      }\n    }\n    if (this.fixedCubie >= 0) {\n      const dep = this.keyface3(this.faces[this.cubies[this.fixedCubie][0]])[k];\n      const newr = [];\n      for (let i = 0; i < r.length; i += 2) {\n        let o = r[i];\n        if (dep >= o[0] && dep <= o[1]) {\n          if (o[0] === 0) {\n            o = [o[1] + 1, slices];\n          } else if (slices === o[1]) {\n            o = [0, o[0] - 1];\n          } else {\n            throw Error(\"fixed cubie option would disconnect move\");\n          }\n        }\n        let found = false;\n        for (let j = 0; j < newr.length; j += 2) {\n          if (\n            newr[j][0] === o[0] &&\n            newr[j][1] === o[1] &&\n            newr[j + 1] === r[i + 1]\n          ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          newr.push(o);\n          newr.push(r[i + 1]);\n        }\n      }\n      r = newr;\n    }\n    // TODO\n    return r;\n  }\n\n  private graybyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 &&\n        (this.options.grayCenters || !this.options.includeCenterOrbits)) ||\n      (ori === 2 &&\n        (this.options.grayEdges || !this.options.includeEdgeOrbits)) ||\n      (ori > 2 &&\n        (this.options.grayCorners || !this.options.includeCornerOrbits))\n    );\n  }\n\n  private skipbyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && !this.options.includeCenterOrbits) ||\n      (ori === 2 && !this.options.includeEdgeOrbits) ||\n      (ori > 2 && !this.options.includeCornerOrbits)\n    );\n  }\n\n  private skipcubie(fi: number): boolean {\n    return this.skipbyori(fi);\n  }\n\n  private header(comment: string): string {\n    return `${comment + copyright}\\n${comment}\\n`;\n  }\n\n  public writegap(): string {\n    // write out a gap set of generators\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    for (let i = 0; i < os.moveops.length; i++) {\n      let movename = `M_${externalName(this.notationMapper, os.movenames[i])}`;\n      let doinv = false;\n      if (movename[movename.length - 1] === \"'\") {\n        movename = movename.substring(0, movename.length - 1);\n        doinv = true;\n      }\n      // gap doesn't like angle brackets in IDs\n      mvs.push(movename);\n      if (doinv) {\n        r.push(`${movename}:=${os.moveops[i].toPerm().inv().toGap()};`);\n      } else {\n        r.push(`${movename}:=${os.moveops[i].toPerm().toGap()};`);\n      }\n    }\n    r.push(\"Gen:=[\");\n    r.push(mvs.join(\",\"));\n    r.push(\"];\");\n    const ip = os.solved.identicalPieces();\n    r.push(\n      `ip:=[${ip\n        .map((_) => `[${_.map((__) => __ + 1).join(\",\")}]`)\n        .join(\",\")}];`,\n    );\n    r.push(\"# Size(Group(Gen));\");\n    r.push(\"# Size(Stabilizer(Group(Gen), ip, OnTuplesSets));\");\n    r.push(\"\");\n    return this.header(\"# \") + r.join(\"\\n\");\n  }\n\n  public writemathematica(): string {\n    // write out a set of generators in mathematica syntax\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    r.push(`(* ${this.header(\"\").trim()} *)`);\n    for (let i = 0; i < os.moveops.length; i++) {\n      let movename = `m${externalName(this.notationMapper, os.movenames[i])}`;\n      let doinv = false;\n      if (movename[movename.length - 1] === \"'\") {\n        movename = movename.substring(0, movename.length - 1);\n        doinv = true;\n      }\n      mvs.push(movename);\n      if (doinv) {\n        r.push(`${movename}=${os.moveops[i].toPerm().inv().toMathematica()};`);\n      } else {\n        r.push(`${movename}=${os.moveops[i].toPerm().toMathematica()};`);\n      }\n    }\n    r.push(`gen={${mvs.join(\",\")}};`);\n    return r.join(\"\\n\");\n  }\n\n  public writeksolve(name: string = \"PuzzleGeometryPuzzle\"): string {\n    const od = this.getOrbitsDef(false);\n    return (\n      this.header(\"# \") + od.toKsolve(name, this.notationMapper).join(\"\\n\")\n    );\n  }\n\n  public getKPuzzleDefinition(\n    fortwisty: boolean = true,\n    includemoves: boolean = true,\n  ): KPuzzleDefinition {\n    const od = this.getOrbitsDef(fortwisty, includemoves);\n    const internalDefinition = od.toKPuzzleDefinition(includemoves);\n    (internalDefinition as any).experimentalPuzzleDescription =\n      this.puzzleDescription;\n    if (!internalDefinition) {\n      throw new Error(\"Missing definition!\");\n    }\n    return internalDefinition;\n  }\n\n  public getMoveFromBits(\n    moverange: number[],\n    amount: number,\n    inverted: boolean,\n    axiscmoves: number[][],\n    setmoves: number[] | undefined,\n    movesetorder: number,\n  ): PGTransform {\n    const moveorbits: PGOrbit[] = [];\n    const perms = [];\n    const oris = [];\n    for (const len of this.cubieords) {\n      perms.push(iota(len));\n      oris.push(zeros(len));\n    }\n    for (let m = moverange[0]; m <= moverange[1]; m++) {\n      const slicecmoves = axiscmoves[m];\n      for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n        const mperm = slicecmoves.slice(j, j + 2 * movesetorder);\n        const setnum = this.cubiesetnums[mperm[0]];\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          mperm[ii] = this.cubieordnums[mperm[ii]];\n        }\n        let inc = 2;\n        let oinc = 3;\n        if (inverted) {\n          inc = mperm.length - 2;\n          oinc = mperm.length - 1;\n        }\n        if (perms[setnum] === iota(this.cubieords[setnum])) {\n          perms[setnum] = perms[setnum].slice();\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum] = oris[setnum].slice();\n          }\n        }\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          perms[setnum][mperm[(ii + inc) % mperm.length]] = mperm[ii];\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum][mperm[ii]] =\n              (mperm[(ii + oinc) % mperm.length] -\n                mperm[(ii + 1) % mperm.length] +\n                2 * this.orbitoris[setnum]) %\n              this.orbitoris[setnum];\n          }\n        }\n      }\n    }\n    let lastId = new PGOrbit(iota(24), zeros(24), 1);\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      if (setmoves && !setmoves[ii]) {\n        continue;\n      }\n      if (this.orbitoris[ii] === 1 || this.options.fixedOrientation) {\n        if (perms[ii] === iota(lastId.perm.length)) {\n          if (perms[ii] !== lastId.perm) {\n            lastId = new PGOrbit(perms[ii], oris[ii], 1);\n          }\n          moveorbits.push(lastId);\n        } else {\n          moveorbits.push(new PGOrbit(perms[ii], oris[ii], 1));\n        }\n      } else {\n        const no = new Array<number>(oris[ii].length);\n        // convert ksolve oris to our internal ori rep\n        for (let jj = 0; jj < perms[ii].length; jj++) {\n          no[jj] = oris[ii][perms[ii][jj]];\n        }\n        moveorbits.push(new PGOrbit(perms[ii], no, this.orbitoris[ii]));\n      }\n    }\n    let mv = new PGTransform(moveorbits);\n    if (amount !== 1) {\n      mv = mv.mulScalar(amount);\n    }\n    return mv;\n  }\n\n  private omitSet(name: string): boolean {\n    for (const excludedSet of this.options.excludeOrbits) {\n      if (excludedSet === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private diffmvsets(a: any[], b: any[], slices: number, neg: boolean) {\n    for (let i = 0; i < a.length; i += 2) {\n      let found = false;\n      for (let j = 0; !found && j < b.length; j += 2) {\n        if (neg) {\n          if (\n            a[i][0] + b[j][1] === slices &&\n            a[i][1] + b[j][0] === slices &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        } else {\n          if (\n            a[i][0] === b[j][0] &&\n            a[i][1] === b[j][1] &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        }\n      }\n      if (!found) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // TODO: This is only public for testing; can we make it private again?\n  public getOrbitsDef(\n    fortwisty: boolean,\n    includemoves: boolean = true,\n  ): PGOrbitsDef {\n    // generate a representation of the puzzle\n    const setmoves = [];\n    if (fortwisty) {\n      for (let i = 0; i < this.cubiesetnames.length; i++) {\n        setmoves.push(1);\n      }\n    }\n    const setnames: string[] = [];\n    const setdefs: PGOrbitDef[] = [];\n    // if both a movelist and rotations are needed, don't add rotations\n    // that do not preserve the movelist.\n    const mps = [];\n    const addrot = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = this.getmovesets(k);\n      mps.push(moveset);\n      if (this.options.addRotations) {\n        addrot.push(1);\n      } else {\n        addrot.push(0);\n      }\n    }\n    const hasrotation = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const slices = this.moveplanesets[k].length;\n      // if the move set includes a rotation around this axis, don't add any more\n      let sawone = false;\n      const moveset = mps[k];\n      for (let i = 0; i < moveset.length; i += 2) {\n        if (moveset[i][0] === 0 && moveset[i][1] === slices) {\n          sawone = true;\n        }\n      }\n      hasrotation[k] = sawone;\n    }\n    if (\n      this.options.addRotations &&\n      (this.options.moveList || this.options.fixedPieceType !== null)\n    ) {\n      for (let i = 0; i < this.moverotations.length; i++) {\n        addrot[i] = 0;\n      }\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        // if the move set includes a rotation around this axis, don't add any more\n        if (hasrotation[k]) {\n          addrot[k] = 3;\n          continue;\n        }\n        // does a rotation around k preserve the move set?\n        for (let i = 0; i < this.moverotations.length; i++) {\n          let nn = this.moveplanenormals[k];\n          for (let ii = 1; ii * 2 <= this.movesetorders[i]; ii++) {\n            nn = nn.rotatepoint(this.moverotations[i][0]);\n            if (addrot[i] & ii) {\n              continue;\n            }\n            let found = -1;\n            let neg = false;\n            for (let j = 0; j < this.moveplanenormals.length; j++) {\n              if (nn.dist(this.moveplanenormals[j]) < eps) {\n                found = j;\n                break;\n              } else if (nn.dist(this.moveplanenormals[j].smul(-1)) < eps) {\n                found = j;\n                neg = true;\n                break;\n              }\n            }\n            if (found < 0) {\n              throw new Error(\"Could not find rotation\");\n            }\n            const cmp = mps[found];\n            if (\n              cmp.length !== mps[k].length ||\n              this.moveplanesets[k].length !==\n                this.moveplanesets[found].length ||\n              this.diffmvsets(\n                cmp,\n                mps[k],\n                this.moveplanesets[found].length,\n                neg,\n              )\n            ) {\n              addrot[i] |= ii;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < this.moverotations.length; i++) {\n        if (addrot[i] === 0) {\n          addrot[i] = 1;\n        } else if (addrot[i] === 1) {\n          if (this.movesetorders[i] > 3) {\n            addrot[i] = 2;\n          } else {\n            addrot[i] = 0;\n          }\n        } else if (addrot[i] === 3) {\n          addrot[i] = 0;\n        } else {\n          throw new Error(\"Impossible addrot val\");\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      if (addrot[k] !== 0 && !hasrotation[k]) {\n        mps[k].push([0, this.moveplanesets[k].length]);\n        mps[k].push(addrot[k]);\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = mps[k];\n      const movesetorder = this.movesetorders[k];\n      // check there's no redundancy in moveset.\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = 0; j < i; j += 2) {\n          if (\n            moveset[i][0] === moveset[j][0] &&\n            moveset[i][1] === moveset[j][1]\n          ) {\n            throw new Error(\"Redundant moves in moveset.\");\n          }\n        }\n      }\n      const allbits = [];\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = moveset[i][0]; j <= moveset[i][1]; j++) {\n          allbits[j] = 1;\n        }\n      }\n      const axiscmoves = this.cmovesbyslice[k];\n      for (let i = 0; i < axiscmoves.length; i++) {\n        if (allbits[i] !== 1) {\n          continue;\n        }\n        const slicecmoves = axiscmoves[i];\n        for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n          if (this.skipcubie(slicecmoves[j])) {\n            continue;\n          }\n          const ind = this.cubiesetnums[slicecmoves[j]];\n          setmoves[ind] = 1;\n        }\n      }\n    }\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        setmoves[i] = 0;\n        continue;\n      }\n      setnames.push(this.cubiesetnames[i]);\n      setdefs.push(\n        new PGOrbitDef(\n          this.cubieords[i],\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const solved: PGOrbit[] = [];\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        continue;\n      }\n      const p = [];\n      const o = [];\n      for (let j = 0; j < this.cubieords[i]; j++) {\n        if (fortwisty) {\n          p.push(j);\n        } else {\n          const cubie = this.cubiesetcubies[i][j];\n          p.push(this.cubievaluemap[cubie]);\n        }\n        o.push(0);\n      }\n      solved.push(\n        new PGOrbit(\n          p,\n          o,\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const movenames: string[] = [];\n    const forcenames: boolean[] = [];\n    const moves: PGTransform[] = [];\n    const isrots: boolean[] = [];\n    if (includemoves) {\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        const moveplaneset = this.moveplanesets[k];\n        const slices = moveplaneset.length;\n        const moveset = mps[k];\n        const movesetgeo = this.movesetgeos[k];\n        for (let i = 0; i < moveset.length; i += 2) {\n          const movebits = moveset[i];\n          // did these movebits come from a specified move?\n          // if they did, we need to use that name.\n          let nameoverride: string | undefined;\n          let inverted = false;\n          if (this.parsedmovelist !== undefined) {\n            for (const parsedmove of this.parsedmovelist) {\n              if (parsedmove[1] !== k) {\n                continue;\n              }\n              let r = [];\n              if (parsedmove[4]) {\n                r = [parsedmove[2], parsedmove[3]];\n              } else {\n                r = [slices - parsedmove[3], slices - parsedmove[2]];\n              }\n              if (r[0] === movebits[0] && r[1] === movebits[1]) {\n                nameoverride = parsedmove[0];\n                inverted = !parsedmove[4];\n              }\n            }\n          }\n          if (nameoverride) {\n            movenames.push(nameoverride);\n            forcenames.push(true);\n          } else {\n            const mna = getmovename(movesetgeo, movebits, slices);\n            inverted = mna[1];\n            const movename = mna[0];\n            if (moveset[i + 1] === 1) {\n              movenames.push(movename);\n            } else {\n              movenames.push(movename + moveset[i + 1]);\n            }\n            forcenames.push(false);\n          }\n          isrots.push(movebits[0] === 0 && movebits[1] === slices);\n          const mv = this.getMoveFromBits(\n            movebits,\n            moveset[i + 1],\n            inverted,\n            this.cmovesbyslice[k],\n            setmoves,\n            this.movesetorders[k],\n          );\n          moves.push(mv);\n        }\n      }\n    }\n    let r = new PGOrbitsDef(\n      setnames,\n      setdefs,\n      new VisibleState(solved),\n      movenames,\n      moves,\n      isrots,\n      forcenames,\n    );\n    if (this.options.optimizeOrbits) {\n      r = r.optimize();\n    }\n    if (this.options.scrambleAmount !== 0) {\n      r.scramble(this.options.scrambleAmount);\n    }\n    return r;\n  }\n\n  public getScramble(n: number = 0): KTransformationData {\n    const od = this.getOrbitsDef(false);\n    return od.toKTransformationData(od.getScrambleTransformation(n));\n  }\n\n  public getMovesAsPerms(): Perm[] {\n    return this.getOrbitsDef(false).moveops.map((_) => _.toPerm());\n  }\n\n  public showcanon(disp: (s: string) => void): void {\n    // show information for canonical move derivation\n    showcanon(this.getOrbitsDef(false), disp);\n  }\n\n  public getsolved(): Perm {\n    // get a solved position\n    const r = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      for (let j = 0; j < this.stickersperface; j++) {\n        r.push(i);\n      }\n    }\n    return new Perm(r);\n  }\n\n  // Given a rotation description that says to align feature1\n  // with a given vector, and then as much as possible feature2\n  // with another given vector, return a Quaternion that\n  // performs this rotation.\n  private getOrientationRotation(desiredRotation: any[]): Quat {\n    const [feature1name, [x1, y1, z1]] = desiredRotation[0];\n    const direction1 = new Quat(0, x1, -y1, z1);\n\n    const [feature2name, [x2, y2, z2]] = desiredRotation[1];\n    const direction2 = new Quat(0, x2, -y2, z2);\n    let feature1: Quat | null = null;\n    let feature2: Quat | null = null;\n    const feature1geoname = this.swizzler.unswizzle(feature1name);\n    const feature2geoname = this.swizzler.unswizzle(feature2name);\n    for (const gn of this.geonormals) {\n      if (feature1geoname === gn[1]) {\n        feature1 = gn[0];\n      }\n      if (feature2geoname === gn[1]) {\n        feature2 = gn[0];\n      }\n    }\n    if (!feature1) {\n      throw new Error(`Could not find feature ${feature1name}`);\n    }\n    if (!feature2) {\n      throw new Error(`Could not find feature ${feature2name}`);\n    }\n    const r1 = feature1.pointrotation(direction1);\n    const feature2rot = feature2.rotatepoint(r1);\n    const r2 = feature2rot\n      .unproject(direction1)\n      .pointrotation(direction2.unproject(direction1));\n    return r2.mul(r1);\n  }\n\n  private getInitial3DRotation(): Quat {\n    const basefacecount = this.baseFaceCount;\n    let orientationDescription: FaceBasedOrientationDescription | null = null;\n    if (this.options.puzzleOrientation) {\n      orientationDescription = this.options.puzzleOrientation;\n    } else if (this.options.puzzleOrientations) {\n      orientationDescription = this.options.puzzleOrientations[basefacecount];\n    }\n    // either no option specified or no matching key in\n    // puzzleOrientations.\n    if (!orientationDescription) {\n      orientationDescription = defaultOrientations()[basefacecount];\n    }\n    if (!orientationDescription) {\n      throw new Error(\"No default orientation?\");\n    }\n    return this.getOrientationRotation(orientationDescription);\n  }\n\n  private generate2dmapping(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n    twodshrink: number = 0.92,\n  ): (fn: number, q: Quat) => number[] {\n    // generate a mapping to use for 2D for textures, svg\n    w -= 2 * trim;\n    h -= 2 * trim;\n    function extendedges(a: number[][], n: number): void {\n      let dx = a[1][0] - a[0][0];\n      let dy = a[1][1] - a[0][1];\n      const ang = (2 * Math.PI) / n;\n      const cosa = Math.cos(ang);\n      const sina = Math.sin(ang);\n      for (let i = 2; i < n; i++) {\n        const ndx = dx * cosa + dy * sina;\n        dy = dy * cosa - dx * sina;\n        dx = ndx;\n        a.push([a[i - 1][0] + dx, a[i - 1][1] + dy]);\n      }\n    }\n    // Find a net from a given face count.  Walk it, assuming we locate\n    // the first edge from (0,0) to (1,1) and compute the minimum and\n    // maximum vertex locations from this.  Then do a second walk, and\n    // assign the actual geometry.\n    this.genperms();\n    const boundarygeo = this.getboundarygeometry();\n    const face0 = boundarygeo.facenames[0][0];\n    const polyn = face0.length; // number of vertices; 3, 4, or 5\n    const net = this.net;\n    if (net === null) {\n      throw new Error(\"No net?\");\n    }\n    const edges: any = {};\n    let minx = 0;\n    let miny = 0;\n    let maxx = 1;\n    let maxy = 0;\n    edges[net[0][0]] = [\n      [1, 0],\n      [0, 0],\n    ];\n    extendedges(edges[net[0][0]], polyn);\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges[f1]) {\n          continue;\n        }\n        edges[f1] = [edges[f0][j % polyn], edges[f0][(j + polyn - 1) % polyn]];\n        extendedges(edges[f1], polyn);\n      }\n    }\n    for (const f in edges) {\n      const es = edges[f];\n      for (const esi of es) {\n        minx = Math.min(minx, esi[0]);\n        maxx = Math.max(maxx, esi[0]);\n        miny = Math.min(miny, esi[1]);\n        maxy = Math.max(maxy, esi[1]);\n      }\n    }\n    const sc = Math.min(w / (maxx - minx), h / (maxy - miny));\n    const xoff = 0.5 * (w - sc * (maxx + minx));\n    const yoff = 0.5 * (h - sc * (maxy + miny));\n    const geos: Record<string, Quat[]> = {};\n    const bg = this.getboundarygeometry();\n    const edges2: any = {};\n    const initv = [\n      [sc + xoff, yoff],\n      [xoff, yoff],\n    ];\n    edges2[net[0][0]] = initv;\n    extendedges(edges2[net[0][0]], polyn);\n    geos[this.facenames[0][1]] = this.project2d(0, 0, [\n      new Quat(0, initv[0][0], initv[0][1], 0),\n      new Quat(0, initv[1][0], initv[1][1], 0),\n    ]);\n    const connectat = [];\n    connectat[0] = 0;\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges2[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      let gfi = -1;\n      for (let j = 0; j < bg.facenames.length; j++) {\n        if (f0 === bg.facenames[j][1]) {\n          gfi = j;\n          break;\n        }\n      }\n      if (gfi < 0) {\n        throw new Error(`Could not find first face name ${f0}`);\n      }\n      const thisface = bg.facenames[gfi][0];\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges2[f1]) {\n          continue;\n        }\n        edges2[f1] = [\n          edges2[f0][j % polyn],\n          edges2[f0][(j + polyn - 1) % polyn],\n        ];\n        extendedges(edges2[f1], polyn);\n        // what edge are we at?\n        const caf0 = connectat[gfi];\n        const mp = thisface[(caf0 + j) % polyn]\n          .sum(thisface[(caf0 + j + polyn - 1) % polyn])\n          .smul(0.5);\n        const epi = findelement(bg.edgenames, mp);\n        const edgename = bg.edgenames[epi][1];\n        const el = splitByFaceNames(edgename, this.facenames);\n        const gf1 = el[f0 === el[0] ? 1 : 0];\n        let gf1i = -1;\n        for (let k = 0; k < bg.facenames.length; k++) {\n          if (gf1 === bg.facenames[k][1]) {\n            gf1i = k;\n            break;\n          }\n        }\n        if (gf1i < 0) {\n          throw new Error(\"Could not find second face name\");\n        }\n        const otherface = bg.facenames[gf1i][0];\n        for (let k = 0; k < otherface.length; k++) {\n          const mp2 = otherface[k].sum(otherface[(k + 1) % polyn]).smul(0.5);\n          if (mp2.dist(mp) <= eps) {\n            const p1 = edges2[f0][(j + polyn - 1) % polyn];\n            const p2 = edges2[f0][j % polyn];\n            connectat[gf1i] = k;\n            geos[gf1] = this.project2d(gf1i, k, [\n              new Quat(0, p2[0], p2[1], 0),\n              new Quat(0, p1[0], p1[1], 0),\n            ]);\n            break;\n          }\n        }\n      }\n    }\n    let hix = 0;\n    let hiy = 0;\n    const rot = this.getInitial3DRotation();\n    for (let face of this.faces) {\n      if (threed) {\n        face = face.rotate(rot);\n      }\n      for (let j = 0; j < face.length; j++) {\n        hix = Math.max(hix, Math.abs(face.get(j).b));\n        hiy = Math.max(hiy, Math.abs(face.get(j).c));\n      }\n    }\n    const sc2 = Math.min(h / hiy / 2, (w - trim) / hix / 4);\n    const mappt2d = (fn: number, q: Quat): number[] => {\n      if (threed) {\n        q = q.rotatepoint(rot);\n        const xoff2 = 0.5 * trim + 0.25 * w;\n        const xmul = this.baseplanes[fn].rotateplane(rot).d < 0 ? 1 : -1;\n        return [\n          trim + w * 0.5 + xmul * (xoff2 - q.b * sc2),\n          trim + h * 0.5 + q.c * sc2,\n        ];\n      } else {\n        const g = geos[this.facenames[fn][1]];\n        return [\n          trim + twodshrink * q.dot(g[0]) + g[2].b,\n          trim + h - twodshrink * q.dot(g[1]) - g[2].c,\n        ];\n      }\n    };\n    return mappt2d;\n  }\n\n  public generatesvg(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n  ): string {\n    const mappt2d = this.generate2dmapping(w, h, trim, threed);\n    function drawedges(id: string, pts: number[][], color: string): string {\n      return `<polygon id=\"${id}\" class=\"sticker\" style=\"fill: ${color}\" points=\"${pts\n        .map((p) => `${p[0]} ${p[1]}`)\n        .join(\" \")}\"/>\\n`;\n    }\n    // Let's build arrays for faster rendering.  We want to map from geo\n    // base face number to color, and we want to map from geo face number\n    // to 2D geometry.  These can be reused as long as the puzzle overall\n    // orientation and canvas size remains unchanged.\n    const pos = this.getsolved();\n    const colormap = [];\n    const facegeo = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      colormap[i] = this.colors[this.facenames[i][1]];\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const facenum = Math.floor(i / this.stickersperface);\n      const fg = [];\n      for (let j = 0; j < face.length; j++) {\n        fg.push(mappt2d(facenum, face.get(j)));\n      }\n      facegeo.push(fg);\n    }\n    const svg = [];\n    // group each base face so we can add a hover element\n    for (let j = 0; j < this.baseFaceCount; j++) {\n      svg.push(\"<g>\");\n      svg.push(`<title>${this.facenames[j][1]}</title>\\n`);\n      for (let ii = 0; ii < this.stickersperface; ii++) {\n        const i = j * this.stickersperface + ii;\n        const cubie = this.facetocubie[i];\n        const cubieori = this.facetoord[i];\n        const cubiesetnum = this.cubiesetnums[cubie];\n        const cubieord = this.cubieordnums[cubie];\n        const color = this.graybyori(cubie) ? \"#808080\" : colormap[pos.p[i]];\n        let id = `${this.cubiesetnames[cubiesetnum]}-l${cubieord}-o${cubieori}`;\n        svg.push(drawedges(id, facegeo[i], color));\n        if (this.duplicatedFaces[i]) {\n          for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n            id = `${this.cubiesetnames[cubiesetnum]}-l${cubieord}-o${jj}`;\n            svg.push(drawedges(id, facegeo[i], color));\n          }\n        }\n      }\n      svg.push(\"</g>\");\n    }\n    const html = `<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 500\">\\n<style type=\"text/css\"><![CDATA[.sticker { stroke: #000000; stroke-width: 1px; }]]></style>\\n${svg.join(\n      \"\",\n    )}</svg>`;\n    return html;\n  }\n\n  // The colorfrac parameter says how much of the face should be\n  // colored (vs dividing lines); we default to 0.77 which seems\n  // to work pretty well.  It should be a number between probably\n  // 0.4 and 0.9.\n  public get3d(options?: {\n    stickerColors?: string[];\n    darkIgnoredOrbits?: boolean;\n  }): StickerDat {\n    const stickers = [];\n    const rot = this.getInitial3DRotation();\n    const faces = [];\n    const maxdist: number = 0.52 * this.basefaces[0].get(0).len();\n    for (let i = 0; i < this.basefaces.length; i++) {\n      const coords = this.basefaces[i].rotate(rot);\n      const name = this.facenames[i][1];\n      faces.push({ coords: toFaceCoords(coords, maxdist), name });\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const facenum = Math.floor(i / this.stickersperface);\n      const cubie = this.facetocubie[i];\n      const cubieori = this.facetoord[i];\n      const cubiesetnum = this.cubiesetnums[cubie];\n      const cubieord = this.cubieordnums[cubie];\n      let color = this.graybyori(cubie)\n        ? options?.darkIgnoredOrbits\n          ? \"#222222\"\n          : \"#808080\"\n        : this.colors[this.facenames[facenum][1]];\n      if (options?.stickerColors) {\n        color = options.stickerColors[i];\n      }\n      const coords = this.faces[i].rotate(rot);\n      stickers.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n        face: facenum,\n      });\n      let fcoords = coords;\n      if (this.duplicatedFaces[i]) {\n        const rotdist = fcoords.length / this.duplicatedFaces[i];\n        for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n          for (let k = 0; k < rotdist; k++) {\n            fcoords = fcoords.rotateforward();\n          }\n          stickers.push({\n            coords: toFaceCoords(fcoords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n            face: facenum,\n            isDup: true,\n          });\n        }\n      }\n    }\n    const grips: StickerDatAxis[] = [];\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      const order = this.movesetorders[i];\n      for (const gn of this.geonormals) {\n        if (msg[0] === gn[1] && msg[1] === gn[2]) {\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot), 1),\n            quantumMove: new Move(msg[0]),\n            order,\n          });\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot).smul(-1), 1),\n            quantumMove: new Move(msg[2]),\n            order,\n          });\n        }\n      }\n    }\n    const twodmapper = this.generate2dmapping(2880, 2160, 0, false, 1.0);\n    const g = (() => {\n      const irot = rot.invrot();\n      return (facenum: number, coords: number[]): number[] => {\n        let q = new Quat(\n          0,\n          coords[0] * maxdist,\n          -coords[1] * maxdist,\n          coords[2] * maxdist,\n        );\n        q = q.rotatepoint(irot);\n        const x = twodmapper(facenum, q);\n        x[0] /= 2880;\n        x[1] = 1 - x[1] / 2160;\n        return x;\n      };\n    })().bind(this);\n    return {\n      stickers,\n      faces,\n      axis: grips,\n      unswizzle: this.unswizzle.bind(this),\n      notationMapper: this.notationMapper,\n      textureMapper: { getuv: g },\n    };\n  }\n\n  //  From the name of a geometric element (face, vertex, edge), get a\n  //  normal vector respecting the default orientation.  This is useful\n  //  to define the initial position of the camera in a 3D scene.  The\n  //  return value is normalized, so multiply it by the camera distance.\n  //  Returns undefined if no such geometric element.\n  public getGeoNormal(geoname: string): number[] | undefined {\n    const rot = this.getInitial3DRotation();\n    const grip = this.swizzler.unswizzle(geoname);\n    for (const gn of this.geonormals) {\n      if (grip === gn[1]) {\n        const r = toCoords(gn[0].rotatepoint(rot), 1);\n        //  This routine is intended to use for the camera location.\n        //  If the camera location is vertical, and we give some\n        //  near-zero values for x and z, then the rotation in the\n        //  X/Z plane will be somewhat arbitrary.  So we clean up the\n        //  returned vector here.  We give a very slight positive\n        //  z value.\n        if (Math.abs(r[0]) < eps && Math.abs(r[2]) < eps) {\n          r[0] = 0.0;\n          r[2] = 1e-6;\n        }\n        return r;\n      }\n    }\n    return undefined;\n  }\n\n  private getfaceindex(facenum: number): number {\n    const divid = this.stickersperface;\n    return Math.floor(facenum / divid);\n  }\n\n  public textForTwizzleExplorer(): string {\n    return `Faces ${this.baseplanerot.length}\nStickers per face ${this.stickersperface}\nShort edge ${this.shortedge}\nCubies ${this.cubies.length}\nEdge distance ${this.edgedistance}\nVertex distance ${this.vertexdistance}`;\n  }\n\n  writeSchreierSims(tw: (s: string) => void) {\n    const os = this.getOrbitsDef(false);\n    const as = os.reassemblySize();\n    tw(`Reassembly size is ${as}`);\n    const ss = schreierSims(this.getMovesAsPerms(), tw);\n    const r = as / ss;\n    tw(`Ratio is ${r}`);\n  }\n}\n\nexport class PGNotation {\n  private orbitNames: string[];\n  constructor(\n    private pg: PuzzleGeometry,\n    od: PGOrbitsDef,\n  ) {\n    this.orbitNames = od.orbitnames;\n  }\n\n  public lookupMove(move: Move): KTransformationData | null {\n    const mv = this.pg.parseMove(move);\n    // if a move list subset is defined, don't return moves outside the subset.\n    if (this.pg.parsedmovelist) {\n      let found = false;\n      for (const parsedmove of this.pg.parsedmovelist) {\n        if (\n          parsedmove[1] === mv[1] &&\n          parsedmove[2] === mv[2] &&\n          parsedmove[3] === mv[3] &&\n          parsedmove[4] === mv[4]\n        ) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return null;\n      }\n    }\n    let bits = [mv[2], mv[3]];\n    if (!mv[4]) {\n      const slices = this.pg.moveplanesets[mv[1]].length;\n      bits = [slices - mv[3], slices - mv[2]];\n    }\n    const pgmv = this.pg.getMoveFromBits(\n      bits,\n      mv[5],\n      !mv[4],\n      this.pg.cmovesbyslice[mv[1]],\n      undefined,\n      this.pg.movesetorders[mv[1]],\n    );\n    const r = PGOrbitsDef.transformToKTransformationData(this.orbitNames, pgmv);\n    return r;\n  }\n\n  remapKPuzzleDefinition(\n    kpuzzleDefinition: KPuzzleDefinition,\n  ): KPuzzleDefinition {\n    return remapKPuzzleDefinition(kpuzzleDefinition, this.pg.notationMapper);\n  }\n}\n","import { Move } from \"../../alg\";\nimport type { KPuzzleDefinition } from \"../../kpuzzle\";\n\nexport interface NotationMapper {\n  notationToInternal(move: Move): Move | null;\n  notationToExternal(move: Move): Move | null;\n}\n\nexport function remapKPuzzleDefinition(\n  internalDefinition: KPuzzleDefinition,\n  notationMapper: NotationMapper,\n): KPuzzleDefinition {\n  const externalDefinition: KPuzzleDefinition = {\n    ...internalDefinition,\n    moves: {},\n  };\n  for (const [internalMoveName, transformationData] of Object.entries(\n    internalDefinition.moves,\n  )) {\n    let prefix = internalMoveName;\n    let suffix = \"\";\n    if ([\"v\", \"w\"].includes(internalMoveName.at(-1)!)) {\n      prefix = internalMoveName.slice(0, -1);\n      suffix = internalMoveName.slice(-1);\n    }\n    const externalPrefix = notationMapper.notationToExternal(\n      Move.fromString(prefix),\n    );\n    if (!externalPrefix) {\n      continue;\n    }\n    const externalMoveName = externalPrefix + suffix;\n    if (!externalMoveName) {\n      throw new Error(\n        `Missing external move name for: ${internalMoveName.toString()}`,\n      );\n    }\n    externalDefinition.moves[externalMoveName.toString()] = transformationData;\n  }\n  return externalDefinition;\n}\n"],"names":["FaceNameSwizzler","constructor","facenames","gripnames_arg","_defineProperty","this","gripnames","i","prefixFree","length","j","startsWith","setGripNames","names","splitByFaceNames","s","r","at","currentMatch","substr","Error","concat","push","joinByFaceIndices","list","sep","join","spinmatch","userinput","longname","e1","e2","found","e","spinmatchv","endsWith","slice","unswizzle","upperCaseGrip","toUpperCase","g","NullMapper","notationToInternal","move","notationToExternal","FTONotationMapper","child","sw","family","innerLayer","outerLayer","Move","QuantumMove","amount","fam","substring","FaceRenamingMapper","internalNames","externalNames","convertString","grip","a","b","suffix","upper","isLowerCase","toLowerCase","convert","ngrip","MegaminxScramblingNotationMapper","Math","abs","NxNxNCubeMapper","slices","pyraminxFamilyMap","U","L","R","B","u","l","Uv","Lv","Rv","Bv","D","F","BL","BR","tetraminxFamilyMap","d","f","bl","br","pyraminxFamilyMapWCA","pyraminxExternalQuantumY","pyraminxInternalQuantumY","PyraminxNotationMapper","wcaHack","newFamilyWCA","newFamily","map","isIdentical","quantum","external","internal","Object","entries","TetraminxNotationMapper","super","skewbFamilyMap","UL","UR","ULv","Fv","URv","Dv","skewbExternalQuantumX","skewbInternalQuantumX","skewbInternalQuantumXPrime","skewbExternalQuantumY","skewbInternalQuantumY","skewbInternalQuantumYPrime","skewbExternalQuantumZ","skewbInternalQuantumZ","skewbInternalQuantumZPrime","SkewbNotationMapper","parseOptions","argv","argp","options","option","addRotations","allMoves","outerBlockMoves","vertexMoves","includeCornerOrbits","includeEdgeOrbits","fixedOrientation","includeCenterOrbits","excludeOrbits","split","moveList","optimizeOrbits","scrambleAmount","fixedPieceType","orientCenters","puzzleOrientation","JSON","parse","puzzleDescription","parsePuzzleDescription","PuzzleGeometryFullOptions","arguments","undefined","assign","zeroCache","iotaCache","zeros","n","c","Array","iota","lcm","t","m","gcd","Perm","_Perm","p","toString","mul","p2","rmul","inv","compareTo","toGap","cyc","seen","incyc","reverse","toMathematica","order","cs","PGOrbitDef","size","mod","reassemblySize","BigInt","factorial","lastGlobalDefinitionCounter","externalName","mapper","moveString","mv","fromString","mv2","PGOrbitsDef","_PGOrbitsDef","orbitnames","orbitdefs","solved","movenames","moveops","isRotation","forcenames","toKTransformationData","ktransformationData","orbits","toKTransformationOrbitData","toKPatternData","kpatternData","toKPatternOrbitData","transformToKTransformationData","mp","describeSet","mvname","pd","perm","ori","toKsolve","name","result","appendDefinition","name2","doinv","toKPuzzleDefinition","includemoves","defaultPatternData","orbitName","numPieces","numOrientations","defaultPatternFrom","pieces","permutation","orientation","orientationDelta","moves","defaultPattern","optimize","neworbitnames","neworbitdefs","newsolved","newmoveops","om","du","DisjointUnion","changed","k","union","keepori","duo","o","find","nontriv","multiple","h","no","on","nv","remapVS","remap","killOri","VisibleState","_","PGTransform","scramble","getScrambleTransformation","pool","floor","random","ri","rj","rm","PGOrbit","_PGOrbit2","_PGOrbit","orimod","newPerm","newOri","equal","toPerm","identicalPieces","done","v","isIdentity","zeroOris","nextNew","reassign","ov","useVS","newori","ktransformationCache","orientationMod","PGTransformBase","internalMul","newOrbits","internalInv","orbit","perms","_PGTransform","mulScalar","_VisibleState","heads","ah","bh","PGPuzzles","skewb","helicopter","dino","pyramorphix","mastermorphix","pyraminx","tetraminx","megaminx","gigaminx","teraminx","petaminx","examinx","zetaminx","yottaminx","pentultimate","starminx","chopasaurus","FTO","octastar","icosamate","eps","centermassface","face","Quat","sum","smul","solvethreeplanes","p1","p3","planes","intersect3","dt","_Quat","q","dist","hypot","len","cross","dot","normalize","sqrt","makenormal","normalizeplane","sub","angle","acos","invrot","det3x3","a00","a01","a02","a10","a11","a12","a20","a21","a22","rotateplane","orthogonal","ab","ac","ad","pointrotation","unproject","rotatepoint","rotateface","det","side","x","cutface","inout","nface","kk","vk","r2","pt","cutfaces","faces","nfaces","faceside","sameplane","makecut","eps2","uniqueplanes","planerot","wasseen","getface","FactoredNumber","mult","multiply","schreierSims","disp","identity","sgs","sgsi","sgslen","Tk","Tklen","knutha","knuthb","resolve","none","sz","tks","sollen","avgs","mults","cnt","lensum","avg","getsgs","Face","_Face","coords","get","off","centermass","sx","sy","rotate","rotateforward","FaceTree","_FaceTree","left","right","_this$left","_this$right","collect","arr","leftfirst","_this$left2","_this$right2","_this$right3","_this$left3","eps3","orientationDefaults","findelement","getPG3DNamedPuzzles","getPuzzleDescriptionString","puzzleName","PUZZLE_BASE_SHAPES","PUZZLE_CUT_TYPES","filter","Boolean","shape","cuts","cutType","distance","parseFloat","getPuzzleGeometryByDesc","desc","parsed","pg","PuzzleGeometry","allstickers","genperms","getPuzzleGeometryByName","getmovename","geo","bits","inverted","movenameFamily","movenamePrefix","String","facename","toCoords","maxdist","toFaceCoords","verbosity","console","log","header","create","moveplanes","moveplanes2","cubies","s5","cube","octahedron","dx","dy","dd","ang","PI","cos","sin","icosahedron","d36","dodecahedron","rotations","ns","negns","closure","baseplane","baseplanerot","baseplanes","baseFaceCount","net","colors","BB","C","A","E","BF","I","G","S","H","J","K","M","O","P","N","Q","baseface","zero","facenormal","edgenormal","vertexnormal","boundary","firstface","edgedistance","vertexdistance","cutplanes","intersects","sawface","sawedge","sawvertex","cut","normal","basefaces","faceplanes","vertexnames","edgenames","edgesperface","searchaddelement","el","jj","otherfaces","facelist","facenametoindex","faceindextoname","neti","fi","ii","fn2","of","faceplane","midpoint","jjj","midpoint2","swizzler","oridata","markedface","oriprefs","fn","f1","f2","c1","c2","st","geonormals","edgename","vertexname","geonormalnames","rotation","moveplane","ft","tar","rval","stickersperface","simplerot","cm","finished","sortme","cm2","sort","rot","shortedge","addNotationMapper","setReidOrder","notationMapper","keyface","keyface2","sfcc","fromCharCode","moveplaneset","moveplanesets","dv","keyface3","findface","key","facelisthash","face2","facecentermass","project2d","facen","edgen","targvec","edgen2","plane","x0","olen","y0","delta","cosr","sinr","x1","y1","rots","expandfaces","moveplanenormals","qnormal","moveplanenormal","goodnormal","sizes","moverotations","sizes2","movesetorders","movesetgeos","gtype","p0","neg","pos","geonormal","Map","suff","s2","set","facetocubie","facetoord","values","cmall","looplimit","mini","ofacelist","typenames","cubiesetnames","cubietypecounts","orbitoris","cubiesetnum","cubiesetnums","cubieordnums","cubieords","cubievaluemap","getcolorkey","cubienum","getfaceindex","cubiesetcubies","cubie","cubiekeymap","cubievalueid","facecnt","typectr","typename","queue","qg","cind","cubiecolorkey","moverotation","tq","reidorder","reidmap","mask","charCodeAt","cubieset","fixedCubie","newmv","modified","stringToBlockMove","match","loslice","hislice","parseInt","amountstr","parseMove","bm","fullrotation","msi","geoname","firstgrip","parsemove","cmovesbyslice","center","towards","hiv","hii","hii2","qs","duplicatedFaces","duplicatedCubies","slicenum","slicecnts","bhi","axiscmoves","sc","cubiedone","ocm","fi2","face1","face0","parsedmovelist","clear","getboundarygeometry","getmovesets","parsedmove","msg","dep","newr","graybyori","grayCenters","grayEdges","grayCorners","skipbyori","skipcubie","comment","writegap","os","getOrbitsDef","mvs","movename","ip","__","writemathematica","trim","writeksolve","od","getKPuzzleDefinition","fortwisty","internalDefinition","experimentalPuzzleDescription","getMoveFromBits","moverange","setmoves","movesetorder","moveorbits","oris","slicecmoves","mperm","setnum","inc","oinc","lastId","omitSet","excludedSet","diffmvsets","setnames","setdefs","mps","addrot","moveset","hasrotation","sawone","nn","cmp","allbits","isrots","movesetgeo","movebits","nameoverride","mna","getScramble","getMovesAsPerms","showcanon","orders","commutes","permA","permB","curlev","nextlev","uniq","sti","nst","getsolved","getOrientationRotation","desiredRotation","feature1name","z1","direction1","feature2name","x2","y2","z2","direction2","feature1","feature2","feature1geoname","feature2geoname","gn","r1","getInitial3DRotation","basefacecount","orientationDescription","puzzleOrientations","generate2dmapping","w","threed","twodshrink","extendedges","cosa","sina","ndx","polyn","edges","minx","miny","maxx","maxy","f0","es","esi","min","max","xoff","yoff","geos","bg","edges2","initv","connectat","gfi","thisface","caf0","epi","gf1","gf1i","otherface","hix","hiy","sc2","mappt2d","xoff2","xmul","generatesvg","drawedges","id","pts","color","colormap","facegeo","facenum","fg","svg","cubieori","cubieord","get3d","stickers","darkIgnoredOrbits","stickerColors","ord","fcoords","rotdist","isDup","grips","coordinates","quantumMove","twodmapper","irot","bind","axis","textureMapper","getuv","getGeoNormal","divid","textForTwizzleExplorer","writeSchreierSims","tw","as","ss","PGNotation","orbitNames","lookupMove","pgmv","remapKPuzzleDefinition","kpuzzleDefinition","externalDefinition","internalMoveName","transformationData","prefix","includes","externalPrefix","externalMoveName"],"sourceRoot":""}